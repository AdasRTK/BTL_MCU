
MCE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080059d4  080059d4  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d4  080059d4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080059dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000b0  08005a8c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08005a8c  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001877e  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef5  00000000  00000000  00038857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  0003c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a721  00000000  00000000  0003d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d2f  00000000  00000000  00057ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c768  00000000  00000000  0006a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004264  00000000  00000000  000f6fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800574c 	.word	0x0800574c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800574c 	.word	0x0800574c

0800014c <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000d0 	.word	0x200000d0

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000d4 	.word	0x200000d4

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000d8 	.word	0x200000d8

080001b8 <isButton4Pressed>:
int isButton4Pressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button4_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton4Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton4Pressed+0x16>
		button4_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton4Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton4Pressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000dc 	.word	0x200000dc

080001dc <subKeyProcess1>:

void subKeyProcess1(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	button1_flag=1;
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <subKeyProcess1+0x14>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	601a      	str	r2, [r3, #0]
	clear_all_led();
 80001e6:	f000 fa07 	bl	80005f8 <clear_all_led>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200000d0 	.word	0x200000d0

080001f4 <subKeyProcess2>:
void subKeyProcess2(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	button2_flag=1;
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <subKeyProcess2+0x14>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
	clear_all_led();
 80001fe:	f000 f9fb 	bl	80005f8 <clear_all_led>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000d4 	.word	0x200000d4

0800020c <subKeyProcess3>:
void subKeyProcess3(){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	button3_flag=1;
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <subKeyProcess3+0x14>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
	clear_all_led();
 8000216:	f000 f9ef 	bl	80005f8 <clear_all_led>
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200000d8 	.word	0x200000d8

08000224 <subKeyProcess4>:
void subKeyProcess4(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	button4_flag=1;
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <subKeyProcess4+0x14>)
 800022a:	2201      	movs	r2, #1
 800022c:	601a      	str	r2, [r3, #0]
	clear_all_led();
 800022e:	f000 f9e3 	bl	80005f8 <clear_all_led>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	200000dc 	.word	0x200000dc

0800023c <getKeyInput1>:


void getKeyInput1(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  KeyReg2[0] = KeyReg1[0];
 8000240:	4b22      	ldr	r3, [pc, #136]	; (80002cc <getKeyInput1+0x90>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <getKeyInput1+0x94>)
 8000246:	6013      	str	r3, [r2, #0]
  KeyReg1[0] = KeyReg0[0];
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <getKeyInput1+0x98>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1f      	ldr	r2, [pc, #124]	; (80002cc <getKeyInput1+0x90>)
 800024e:	6013      	str	r3, [r2, #0]
  //Add your button here
  KeyReg0[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000250:	2102      	movs	r1, #2
 8000252:	4821      	ldr	r0, [pc, #132]	; (80002d8 <getKeyInput1+0x9c>)
 8000254:	f002 f846 	bl	80022e4 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <getKeyInput1+0x98>)
 800025e:	601a      	str	r2, [r3, #0]

  if ((KeyReg1[0] == KeyReg0[0]) && (KeyReg1[0] == KeyReg2[0])){
 8000260:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <getKeyInput1+0x90>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <getKeyInput1+0x98>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d12d      	bne.n	80002c8 <getKeyInput1+0x8c>
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <getKeyInput1+0x90>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <getKeyInput1+0x94>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d127      	bne.n	80002c8 <getKeyInput1+0x8c>
    if (KeyReg2[0] != KeyReg3[0]){
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <getKeyInput1+0x94>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <getKeyInput1+0xa0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d012      	beq.n	80002aa <getKeyInput1+0x6e>
      KeyReg3[0] = KeyReg2[0];
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <getKeyInput1+0x94>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <getKeyInput1+0xa0>)
 800028a:	6013      	str	r3, [r2, #0]

      if (KeyReg0[0] == PRESSED_STATE){
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <getKeyInput1+0x98>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d106      	bne.n	80002a2 <getKeyInput1+0x66>
        TimeOutForKeyPress = 500;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <getKeyInput1+0xa4>)
 8000296:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800029a:	601a      	str	r2, [r3, #0]
        subKeyProcess1();
 800029c:	f7ff ff9e 	bl	80001dc <subKeyProcess1>
    			TimeOutForKeyPress = 500;
    			subKeyProcess1();
    		}
    }
  }
}
 80002a0:	e012      	b.n	80002c8 <getKeyInput1+0x8c>
    	  TimeOutForKeyPress = 0;
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <getKeyInput1+0xa4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	e00e      	b.n	80002c8 <getKeyInput1+0x8c>
    		TimeOutForKeyPress--;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <getKeyInput1+0xa4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <getKeyInput1+0xa4>)
 80002b2:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <getKeyInput1+0xa4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d105      	bne.n	80002c8 <getKeyInput1+0x8c>
    			TimeOutForKeyPress = 500;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <getKeyInput1+0xa4>)
 80002be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002c2:	601a      	str	r2, [r3, #0]
    			subKeyProcess1();
 80002c4:	f7ff ff8a 	bl	80001dc <subKeyProcess1>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000010 	.word	0x20000010
 80002d0:	20000020 	.word	0x20000020
 80002d4:	20000000 	.word	0x20000000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	20000030 	.word	0x20000030
 80002e0:	200000cc 	.word	0x200000cc

080002e4 <getKeyInput2>:

void getKeyInput2(){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  KeyReg2[1] = KeyReg1[1];
 80002e8:	4b22      	ldr	r3, [pc, #136]	; (8000374 <getKeyInput2+0x90>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a22      	ldr	r2, [pc, #136]	; (8000378 <getKeyInput2+0x94>)
 80002ee:	6053      	str	r3, [r2, #4]
  KeyReg1[1] = KeyReg0[1];
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <getKeyInput2+0x98>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <getKeyInput2+0x90>)
 80002f6:	6053      	str	r3, [r2, #4]
  //Add your button here
  KeyReg0[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 80002f8:	2110      	movs	r1, #16
 80002fa:	4821      	ldr	r0, [pc, #132]	; (8000380 <getKeyInput2+0x9c>)
 80002fc:	f001 fff2 	bl	80022e4 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	4b1d      	ldr	r3, [pc, #116]	; (800037c <getKeyInput2+0x98>)
 8000306:	605a      	str	r2, [r3, #4]

  if ((KeyReg1[1] == KeyReg0[1]) && (KeyReg1[1] == KeyReg2[1])){
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <getKeyInput2+0x90>)
 800030a:	685a      	ldr	r2, [r3, #4]
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <getKeyInput2+0x98>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	d12d      	bne.n	8000370 <getKeyInput2+0x8c>
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <getKeyInput2+0x90>)
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <getKeyInput2+0x94>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	d127      	bne.n	8000370 <getKeyInput2+0x8c>
    if (KeyReg2[1] != KeyReg3[1]){
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <getKeyInput2+0x94>)
 8000322:	685a      	ldr	r2, [r3, #4]
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <getKeyInput2+0xa0>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	429a      	cmp	r2, r3
 800032a:	d012      	beq.n	8000352 <getKeyInput2+0x6e>
      KeyReg3[1] = KeyReg2[1];
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <getKeyInput2+0x94>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a14      	ldr	r2, [pc, #80]	; (8000384 <getKeyInput2+0xa0>)
 8000332:	6053      	str	r3, [r2, #4]

      if (KeyReg0[1] == PRESSED_STATE){
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <getKeyInput2+0x98>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d106      	bne.n	800034a <getKeyInput2+0x66>
        TimeOutForKeyPress = 500;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <getKeyInput2+0xa4>)
 800033e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000342:	601a      	str	r2, [r3, #0]
        subKeyProcess2();
 8000344:	f7ff ff56 	bl	80001f4 <subKeyProcess2>
    			TimeOutForKeyPress = 500;
    			subKeyProcess2();
    		}
    }
  }
}
 8000348:	e012      	b.n	8000370 <getKeyInput2+0x8c>
    	  TimeOutForKeyPress = 0;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <getKeyInput2+0xa4>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	e00e      	b.n	8000370 <getKeyInput2+0x8c>
    		TimeOutForKeyPress--;
 8000352:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <getKeyInput2+0xa4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <getKeyInput2+0xa4>)
 800035a:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <getKeyInput2+0xa4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d105      	bne.n	8000370 <getKeyInput2+0x8c>
    			TimeOutForKeyPress = 500;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <getKeyInput2+0xa4>)
 8000366:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800036a:	601a      	str	r2, [r3, #0]
    			subKeyProcess2();
 800036c:	f7ff ff42 	bl	80001f4 <subKeyProcess2>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000010 	.word	0x20000010
 8000378:	20000020 	.word	0x20000020
 800037c:	20000000 	.word	0x20000000
 8000380:	40010800 	.word	0x40010800
 8000384:	20000030 	.word	0x20000030
 8000388:	200000cc 	.word	0x200000cc

0800038c <getKeyInput3>:

void getKeyInput3(){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  KeyReg2[2] = KeyReg1[2];
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <getKeyInput3+0x90>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a22      	ldr	r2, [pc, #136]	; (8000420 <getKeyInput3+0x94>)
 8000396:	6093      	str	r3, [r2, #8]
  KeyReg1[2] = KeyReg0[2];
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <getKeyInput3+0x98>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a1f      	ldr	r2, [pc, #124]	; (800041c <getKeyInput3+0x90>)
 800039e:	6093      	str	r3, [r2, #8]
  //Add your button here
  KeyReg0[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80003a0:	2101      	movs	r1, #1
 80003a2:	4821      	ldr	r0, [pc, #132]	; (8000428 <getKeyInput3+0x9c>)
 80003a4:	f001 ff9e 	bl	80022e4 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <getKeyInput3+0x98>)
 80003ae:	609a      	str	r2, [r3, #8]

  if ((KeyReg1[2] == KeyReg0[2]) && (KeyReg1[2] == KeyReg2[2])){
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <getKeyInput3+0x90>)
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <getKeyInput3+0x98>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d12d      	bne.n	8000418 <getKeyInput3+0x8c>
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <getKeyInput3+0x90>)
 80003be:	689a      	ldr	r2, [r3, #8]
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <getKeyInput3+0x94>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d127      	bne.n	8000418 <getKeyInput3+0x8c>
    if (KeyReg2[2] != KeyReg3[2]){
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <getKeyInput3+0x94>)
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <getKeyInput3+0xa0>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d012      	beq.n	80003fa <getKeyInput3+0x6e>
      KeyReg3[2] = KeyReg2[2];
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <getKeyInput3+0x94>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a14      	ldr	r2, [pc, #80]	; (800042c <getKeyInput3+0xa0>)
 80003da:	6093      	str	r3, [r2, #8]

      if (KeyReg0[2] == PRESSED_STATE){
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <getKeyInput3+0x98>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d106      	bne.n	80003f2 <getKeyInput3+0x66>
        TimeOutForKeyPress = 500;
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <getKeyInput3+0xa4>)
 80003e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003ea:	601a      	str	r2, [r3, #0]
        subKeyProcess3();
 80003ec:	f7ff ff0e 	bl	800020c <subKeyProcess3>
    			TimeOutForKeyPress = 500;
    			subKeyProcess3();
    		}
    }
  }
}
 80003f0:	e012      	b.n	8000418 <getKeyInput3+0x8c>
    	  TimeOutForKeyPress = 0;
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <getKeyInput3+0xa4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
}
 80003f8:	e00e      	b.n	8000418 <getKeyInput3+0x8c>
    		TimeOutForKeyPress--;
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <getKeyInput3+0xa4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	3b01      	subs	r3, #1
 8000400:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <getKeyInput3+0xa4>)
 8000402:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <getKeyInput3+0xa4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d105      	bne.n	8000418 <getKeyInput3+0x8c>
    			TimeOutForKeyPress = 500;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <getKeyInput3+0xa4>)
 800040e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000412:	601a      	str	r2, [r3, #0]
    			subKeyProcess3();
 8000414:	f7ff fefa 	bl	800020c <subKeyProcess3>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000010 	.word	0x20000010
 8000420:	20000020 	.word	0x20000020
 8000424:	20000000 	.word	0x20000000
 8000428:	40010c00 	.word	0x40010c00
 800042c:	20000030 	.word	0x20000030
 8000430:	200000cc 	.word	0x200000cc

08000434 <getKeyInput4>:

void getKeyInput4(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  KeyReg2[3] = KeyReg1[3];
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <getKeyInput4+0x90>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <getKeyInput4+0x94>)
 800043e:	60d3      	str	r3, [r2, #12]
  KeyReg1[3] = KeyReg0[3];
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <getKeyInput4+0x98>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a1f      	ldr	r2, [pc, #124]	; (80004c4 <getKeyInput4+0x90>)
 8000446:	60d3      	str	r3, [r2, #12]
  //Add your button here
  KeyReg0[3] = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 8000448:	2101      	movs	r1, #1
 800044a:	4821      	ldr	r0, [pc, #132]	; (80004d0 <getKeyInput4+0x9c>)
 800044c:	f001 ff4a 	bl	80022e4 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <getKeyInput4+0x98>)
 8000456:	60da      	str	r2, [r3, #12]

  if ((KeyReg1[3] == KeyReg0[3]) && (KeyReg1[3] == KeyReg2[3])){
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <getKeyInput4+0x90>)
 800045a:	68da      	ldr	r2, [r3, #12]
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <getKeyInput4+0x98>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	429a      	cmp	r2, r3
 8000462:	d12d      	bne.n	80004c0 <getKeyInput4+0x8c>
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <getKeyInput4+0x90>)
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <getKeyInput4+0x94>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	429a      	cmp	r2, r3
 800046e:	d127      	bne.n	80004c0 <getKeyInput4+0x8c>
    if (KeyReg2[3] != KeyReg3[3]){
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <getKeyInput4+0x94>)
 8000472:	68da      	ldr	r2, [r3, #12]
 8000474:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <getKeyInput4+0xa0>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	429a      	cmp	r2, r3
 800047a:	d012      	beq.n	80004a2 <getKeyInput4+0x6e>
      KeyReg3[3] = KeyReg2[3];
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <getKeyInput4+0x94>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <getKeyInput4+0xa0>)
 8000482:	60d3      	str	r3, [r2, #12]

      if (KeyReg0[3] == PRESSED_STATE){
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <getKeyInput4+0x98>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d106      	bne.n	800049a <getKeyInput4+0x66>
        TimeOutForKeyPress = 500;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <getKeyInput4+0xa4>)
 800048e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000492:	601a      	str	r2, [r3, #0]
        subKeyProcess4();
 8000494:	f7ff fec6 	bl	8000224 <subKeyProcess4>
    			TimeOutForKeyPress = 500;
    			subKeyProcess4();
    		}
    }
  }
}
 8000498:	e012      	b.n	80004c0 <getKeyInput4+0x8c>
    	  TimeOutForKeyPress = 0;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <getKeyInput4+0xa4>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
}
 80004a0:	e00e      	b.n	80004c0 <getKeyInput4+0x8c>
    		TimeOutForKeyPress--;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <getKeyInput4+0xa4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <getKeyInput4+0xa4>)
 80004aa:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <getKeyInput4+0xa4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d105      	bne.n	80004c0 <getKeyInput4+0x8c>
    			TimeOutForKeyPress = 500;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <getKeyInput4+0xa4>)
 80004b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004ba:	601a      	str	r2, [r3, #0]
    			subKeyProcess4();
 80004bc:	f7ff feb2 	bl	8000224 <subKeyProcess4>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000010 	.word	0x20000010
 80004c8:	20000020 	.word	0x20000020
 80004cc:	20000000 	.word	0x20000000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000030 	.word	0x20000030
 80004d8:	200000cc 	.word	0x200000cc

080004dc <traffic_light>:
 */
#include"global.h"


//red and green on equal to yellow on
void traffic_light(int led_status){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	2b19      	cmp	r3, #25
 80004ea:	d87f      	bhi.n	80005ec <traffic_light+0x110>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <traffic_light+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	0800055d 	.word	0x0800055d
 80004f8:	080005ed 	.word	0x080005ed
 80004fc:	080005ed 	.word	0x080005ed
 8000500:	08000567 	.word	0x08000567
 8000504:	080005ed 	.word	0x080005ed
 8000508:	08000579 	.word	0x08000579
 800050c:	08000583 	.word	0x08000583
 8000510:	08000595 	.word	0x08000595
 8000514:	080005ed 	.word	0x080005ed
 8000518:	080005ed 	.word	0x080005ed
 800051c:	080005ed 	.word	0x080005ed
 8000520:	080005ed 	.word	0x080005ed
 8000524:	080005ed 	.word	0x080005ed
 8000528:	080005ed 	.word	0x080005ed
 800052c:	080005ed 	.word	0x080005ed
 8000530:	080005ed 	.word	0x080005ed
 8000534:	080005ed 	.word	0x080005ed
 8000538:	080005ed 	.word	0x080005ed
 800053c:	080005ed 	.word	0x080005ed
 8000540:	080005ed 	.word	0x080005ed
 8000544:	080005ed 	.word	0x080005ed
 8000548:	080005a3 	.word	0x080005a3
 800054c:	080005a9 	.word	0x080005a9
 8000550:	080005bb 	.word	0x080005bb
 8000554:	080005c9 	.word	0x080005c9
 8000558:	080005db 	.word	0x080005db
	switch(led_status){
	case INIT:
		clear_all_led();
 800055c:	f000 f84c 	bl	80005f8 <clear_all_led>
		buzzer_off();
 8000560:	f000 f950 	bl	8000804 <buzzer_off>
		break;
 8000564:	e043      	b.n	80005ee <traffic_light+0x112>
	case AUTO_RED_GREEN:
		red1_on();
 8000566:	f000 f8b9 	bl	80006dc <red1_on>
		green2_on();
 800056a:	f000 f8db 	bl	8000724 <green2_on>
		green1_off();
 800056e:	f000 f919 	bl	80007a4 <green1_off>
		red2_off();
 8000572:	f000 f90b 	bl	800078c <red2_off>
		break;
 8000576:	e03a      	b.n	80005ee <traffic_light+0x112>
	case AUTO_RED_YELLOW:
		red1_on();
 8000578:	f000 f8b0 	bl	80006dc <red1_on>
		red2_on();
 800057c:	f000 f8ba 	bl	80006f4 <red2_on>
		break;
 8000580:	e035      	b.n	80005ee <traffic_light+0x112>
	case AUTO_GREEN_RED:
		green1_on();
 8000582:	f000 f8c3 	bl	800070c <green1_on>
		red2_on();
 8000586:	f000 f8b5 	bl	80006f4 <red2_on>
		red1_off();
 800058a:	f000 f8f3 	bl	8000774 <red1_off>
		green2_off();
 800058e:	f000 f915 	bl	80007bc <green2_off>
		break;
 8000592:	e02c      	b.n	80005ee <traffic_light+0x112>
	case AUTO_YELLOW_RED:
		red1_on();
 8000594:	f000 f8a2 	bl	80006dc <red1_on>
		green1_on();
 8000598:	f000 f8b8 	bl	800070c <green1_on>
		red2_on();
 800059c:	f000 f8aa 	bl	80006f4 <red2_on>
		break;
 80005a0:	e025      	b.n	80005ee <traffic_light+0x112>
	case INIT1:
		clear_all_led();
 80005a2:	f000 f829 	bl	80005f8 <clear_all_led>
		break;
 80005a6:	e022      	b.n	80005ee <traffic_light+0x112>
	case PEDES_RED_GREEN:
		red1_on();
 80005a8:	f000 f898 	bl	80006dc <red1_on>
		green2_on();
 80005ac:	f000 f8ba 	bl	8000724 <green2_on>
		green1_off();
 80005b0:	f000 f8f8 	bl	80007a4 <green1_off>
		red2_off();
 80005b4:	f000 f8ea 	bl	800078c <red2_off>
		break;
 80005b8:	e019      	b.n	80005ee <traffic_light+0x112>
	case PEDES_RED_YELLOW:
		red1_on();
 80005ba:	f000 f88f 	bl	80006dc <red1_on>
		red2_on();
 80005be:	f000 f899 	bl	80006f4 <red2_on>
		buzzer_on();
 80005c2:	f000 f8bb 	bl	800073c <buzzer_on>
		break;
 80005c6:	e012      	b.n	80005ee <traffic_light+0x112>
	case PEDES_GREEN_RED:
		green1_on();
 80005c8:	f000 f8a0 	bl	800070c <green1_on>
		red2_on();
 80005cc:	f000 f892 	bl	80006f4 <red2_on>
		red1_off();
 80005d0:	f000 f8d0 	bl	8000774 <red1_off>
		green2_off();
 80005d4:	f000 f8f2 	bl	80007bc <green2_off>
		break;
 80005d8:	e009      	b.n	80005ee <traffic_light+0x112>
	case PEDES_YELLOW_RED:
		red1_on();
 80005da:	f000 f87f 	bl	80006dc <red1_on>
		green1_on();
 80005de:	f000 f895 	bl	800070c <green1_on>
		red2_on();
 80005e2:	f000 f887 	bl	80006f4 <red2_on>
		buzzer_on();
 80005e6:	f000 f8a9 	bl	800073c <buzzer_on>
		break;
 80005ea:	e000      	b.n	80005ee <traffic_light+0x112>
	default:
		break;
 80005ec:	bf00      	nop
	}
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop

080005f8 <clear_all_led>:





void clear_all_led(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	count=0;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <clear_all_led+0x28>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
	red1_off();
 8000602:	f000 f8b7 	bl	8000774 <red1_off>
	red2_off();
 8000606:	f000 f8c1 	bl	800078c <red2_off>
	green1_off();
 800060a:	f000 f8cb 	bl	80007a4 <green1_off>
	green2_off();
 800060e:	f000 f8d5 	bl	80007bc <green2_off>
	ped1_off();
 8000612:	f000 f8df 	bl	80007d4 <ped1_off>
	ped2_off();
 8000616:	f000 f8e9 	bl	80007ec <ped2_off>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000f4 	.word	0x200000f4

08000624 <set_manual>:


void set_manual(int led_status){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3b0e      	subs	r3, #14
 8000630:	2b03      	cmp	r3, #3
 8000632:	d823      	bhi.n	800067c <set_manual+0x58>
 8000634:	a201      	add	r2, pc, #4	; (adr r2, 800063c <set_manual+0x18>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	0800064d 	.word	0x0800064d
 8000640:	08000657 	.word	0x08000657
 8000644:	08000665 	.word	0x08000665
 8000648:	0800066f 	.word	0x0800066f
	switch(led_status){
	case MANUAL_RED_GREEN:
		red1_on();
 800064c:	f000 f846 	bl	80006dc <red1_on>
		green2_on();
 8000650:	f000 f868 	bl	8000724 <green2_on>
		break;
 8000654:	e013      	b.n	800067e <set_manual+0x5a>
	case MANUAL_RED_YELLOW:
		red1_on();
 8000656:	f000 f841 	bl	80006dc <red1_on>
		red2_on();
 800065a:	f000 f84b 	bl	80006f4 <red2_on>
		green2_on();
 800065e:	f000 f861 	bl	8000724 <green2_on>
		break;
 8000662:	e00c      	b.n	800067e <set_manual+0x5a>
	case MANUAL_GREEN_RED:
		green1_on();
 8000664:	f000 f852 	bl	800070c <green1_on>
		red2_on();
 8000668:	f000 f844 	bl	80006f4 <red2_on>
		break;
 800066c:	e007      	b.n	800067e <set_manual+0x5a>
	case MANUAL_YELLOW_RED:
		red1_on();
 800066e:	f000 f835 	bl	80006dc <red1_on>
		green1_on();
 8000672:	f000 f84b 	bl	800070c <green1_on>
		red2_on();
 8000676:	f000 f83d 	bl	80006f4 <red2_on>
		break;
 800067a:	e000      	b.n	800067e <set_manual+0x5a>
	default:
		break;
 800067c:	bf00      	nop
	}
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop

08000688 <set_tuning>:

void set_tuning(int led_status){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	switch(led_status){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b15      	cmp	r3, #21
 8000694:	d017      	beq.n	80006c6 <set_tuning+0x3e>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b15      	cmp	r3, #21
 800069a:	dc19      	bgt.n	80006d0 <set_tuning+0x48>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b13      	cmp	r3, #19
 80006a0:	d003      	beq.n	80006aa <set_tuning+0x22>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b14      	cmp	r3, #20
 80006a6:	d005      	beq.n	80006b4 <set_tuning+0x2c>
	case TUNING_GREEN:
		green1_on();
		green2_on();
		break;
	default:
		break;
 80006a8:	e012      	b.n	80006d0 <set_tuning+0x48>
		red1_on();
 80006aa:	f000 f817 	bl	80006dc <red1_on>
		red2_on();
 80006ae:	f000 f821 	bl	80006f4 <red2_on>
		break;
 80006b2:	e00e      	b.n	80006d2 <set_tuning+0x4a>
		red1_on();
 80006b4:	f000 f812 	bl	80006dc <red1_on>
		green1_on();
 80006b8:	f000 f828 	bl	800070c <green1_on>
		red2_on();
 80006bc:	f000 f81a 	bl	80006f4 <red2_on>
		green2_on();
 80006c0:	f000 f830 	bl	8000724 <green2_on>
		break;
 80006c4:	e005      	b.n	80006d2 <set_tuning+0x4a>
		green1_on();
 80006c6:	f000 f821 	bl	800070c <green1_on>
		green2_on();
 80006ca:	f000 f82b 	bl	8000724 <green2_on>
		break;
 80006ce:	e000      	b.n	80006d2 <set_tuning+0x4a>
		break;
 80006d0:	bf00      	nop
	}
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <red1_on>:


void red1_on(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <red1_on+0x14>)
 80006e8:	f001 fe13 	bl	8002312 <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40010800 	.word	0x40010800

080006f4 <red2_on>:
void red2_on(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2120      	movs	r1, #32
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <red2_on+0x14>)
 80006fe:	f001 fe08 	bl	8002312 <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40010c00 	.word	0x40010c00

0800070c <green1_on>:
void green1_on(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <green1_on+0x14>)
 8000716:	f001 fdfc 	bl	8002312 <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40010c00 	.word	0x40010c00

08000724 <green2_on>:
void green2_on(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <green2_on+0x14>)
 800072e:	f001 fdf0 	bl	8002312 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40010c00 	.word	0x40010c00

0800073c <buzzer_on>:
	HAL_GPIO_WritePin(PEDES1_GPIO_Port, PEDES1_Pin, SET);
}
void ped2_on(){
	HAL_GPIO_WritePin(PEDES2_GPIO_Port, PEDES2_Pin, SET);
}
void buzzer_on(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,buzzer_input);
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <buzzer_on+0x18>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <buzzer_on+0x1c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200000f8 	.word	0x200000f8
 8000758:	20000128 	.word	0x20000128

0800075c <buzzeroff>:
void buzzeroff(){
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <buzzeroff+0x14>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000128 	.word	0x20000128

08000774 <red1_off>:

void red1_off(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077e:	4802      	ldr	r0, [pc, #8]	; (8000788 <red1_off+0x14>)
 8000780:	f001 fdc7 	bl	8002312 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40010800 	.word	0x40010800

0800078c <red2_off>:
void red2_off(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <red2_off+0x14>)
 8000796:	f001 fdbc 	bl	8002312 <HAL_GPIO_WritePin>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <green1_off>:
void green1_off(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2108      	movs	r1, #8
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <green1_off+0x14>)
 80007ae:	f001 fdb0 	bl	8002312 <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40010c00 	.word	0x40010c00

080007bc <green2_off>:
void green2_off(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2110      	movs	r1, #16
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <green2_off+0x14>)
 80007c6:	f001 fda4 	bl	8002312 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010c00 	.word	0x40010c00

080007d4 <ped1_off>:
void ped1_off(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PEDES1_GPIO_Port, PEDES1_Pin,RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <ped1_off+0x14>)
 80007e0:	f001 fd97 	bl	8002312 <HAL_GPIO_WritePin>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40010c00 	.word	0x40010c00

080007ec <ped2_off>:
void ped2_off(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PEDES2_GPIO_Port, PEDES2_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <ped2_off+0x14>)
 80007f8:	f001 fd8b 	bl	8002312 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010800 	.word	0x40010800

08000804 <buzzer_off>:
void buzzer_off(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	buzzer_input=0;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <buzzer_off+0x18>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <buzzer_off+0x1c>)
 8000812:	f002 fb41 	bl	8002e98 <HAL_TIM_PWM_Stop>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000f8 	.word	0x200000f8
 8000820:	20000128 	.word	0x20000128

08000824 <fsm_automatic_run>:
 *      Author: PC
 */

#include "global.h"

void fsm_automatic_run() {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	switch(led_status){
 8000828:	4bb6      	ldr	r3, [pc, #728]	; (8000b04 <fsm_automatic_run+0x2e0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3b01      	subs	r3, #1
 800082e:	2b07      	cmp	r3, #7
 8000830:	f200 81ee 	bhi.w	8000c10 <fsm_automatic_run+0x3ec>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <fsm_automatic_run+0x18>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	0800085d 	.word	0x0800085d
 8000840:	08000c11 	.word	0x08000c11
 8000844:	08000c11 	.word	0x08000c11
 8000848:	080008a7 	.word	0x080008a7
 800084c:	08000c11 	.word	0x08000c11
 8000850:	08000971 	.word	0x08000971
 8000854:	08000a3b 	.word	0x08000a3b
 8000858:	08000b49 	.word	0x08000b49
	case INIT:
		if(timer1_flag==1){
 800085c:	4baa      	ldr	r3, [pc, #680]	; (8000b08 <fsm_automatic_run+0x2e4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	f040 81d7 	bne.w	8000c14 <fsm_automatic_run+0x3f0>
			led_status = AUTO_RED_GREEN;
 8000866:	4ba7      	ldr	r3, [pc, #668]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000868:	2204      	movs	r2, #4
 800086a:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 800086c:	4ba7      	ldr	r3, [pc, #668]	; (8000b0c <fsm_automatic_run+0x2e8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3303      	adds	r3, #3
 8000872:	2264      	movs	r2, #100	; 0x64
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fecf 	bl	800161c <setTimer1>
			printf("Auto mode\r\n");
 800087e:	48a4      	ldr	r0, [pc, #656]	; (8000b10 <fsm_automatic_run+0x2ec>)
 8000880:	f004 f814 	bl	80048ac <puts>
			count=0;
 8000884:	4ba3      	ldr	r3, [pc, #652]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			printf("RED-GREEN: %d\r\n",GREEN+counter_green-count);
 800088a:	4ba0      	ldr	r3, [pc, #640]	; (8000b0c <fsm_automatic_run+0x2e8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1cda      	adds	r2, r3, #3
 8000890:	4ba0      	ldr	r3, [pc, #640]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	4619      	mov	r1, r3
 8000898:	489f      	ldr	r0, [pc, #636]	; (8000b18 <fsm_automatic_run+0x2f4>)
 800089a:	f003 ff81 	bl	80047a0 <iprintf>
			setTimer2(100);
 800089e:	2064      	movs	r0, #100	; 0x64
 80008a0:	f000 fed0 	bl	8001644 <setTimer2>
		}
		break;
 80008a4:	e1b6      	b.n	8000c14 <fsm_automatic_run+0x3f0>

	case AUTO_RED_GREEN:
		if(timer1_flag == 1) {
 80008a6:	4b98      	ldr	r3, [pc, #608]	; (8000b08 <fsm_automatic_run+0x2e4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d11b      	bne.n	80008e6 <fsm_automatic_run+0xc2>
			led_status = AUTO_RED_YELLOW;
 80008ae:	4b95      	ldr	r3, [pc, #596]	; (8000b04 <fsm_automatic_run+0x2e0>)
 80008b0:	2206      	movs	r2, #6
 80008b2:	601a      	str	r2, [r3, #0]
			setTimer1((YELLOW+counter_yellow)*100);
 80008b4:	4b99      	ldr	r3, [pc, #612]	; (8000b1c <fsm_automatic_run+0x2f8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 feab 	bl	800161c <setTimer1>
			count=0;
 80008c6:	4b93      	ldr	r3, [pc, #588]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
			printf("RED-YELLOW: %d\r\n",YELLOW+counter_yellow-count);
 80008cc:	4b93      	ldr	r3, [pc, #588]	; (8000b1c <fsm_automatic_run+0x2f8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1c9a      	adds	r2, r3, #2
 80008d2:	4b90      	ldr	r3, [pc, #576]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	4891      	ldr	r0, [pc, #580]	; (8000b20 <fsm_automatic_run+0x2fc>)
 80008dc:	f003 ff60 	bl	80047a0 <iprintf>
			setTimer2(100);
 80008e0:	2064      	movs	r0, #100	; 0x64
 80008e2:	f000 feaf 	bl	8001644 <setTimer2>
		}
		if(timer2_flag == 1){
 80008e6:	4b8f      	ldr	r3, [pc, #572]	; (8000b24 <fsm_automatic_run+0x300>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d111      	bne.n	8000912 <fsm_automatic_run+0xee>
			count++;
 80008ee:	4b89      	ldr	r3, [pc, #548]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a87      	ldr	r2, [pc, #540]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80008f6:	6013      	str	r3, [r2, #0]
			printf("RED-GREEN: %d\r\n",GREEN+counter_green-count);
 80008f8:	4b84      	ldr	r3, [pc, #528]	; (8000b0c <fsm_automatic_run+0x2e8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	1cda      	adds	r2, r3, #3
 80008fe:	4b85      	ldr	r3, [pc, #532]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4619      	mov	r1, r3
 8000906:	4884      	ldr	r0, [pc, #528]	; (8000b18 <fsm_automatic_run+0x2f4>)
 8000908:	f003 ff4a 	bl	80047a0 <iprintf>
			setTimer2(100);
 800090c:	2064      	movs	r0, #100	; 0x64
 800090e:	f000 fe99 	bl	8001644 <setTimer2>
		}
		if(isButton2Pressed()== 1) {
 8000912:	f7ff fc2d 	bl	8000170 <isButton2Pressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d105      	bne.n	8000928 <fsm_automatic_run+0x104>
			led_status= MANUAL_RED_GREEN;
 800091c:	4b79      	ldr	r3, [pc, #484]	; (8000b04 <fsm_automatic_run+0x2e0>)
 800091e:	220e      	movs	r2, #14
 8000920:	601a      	str	r2, [r3, #0]
			printf("Button 2 Pressed: Manual mode\r\n");
 8000922:	4881      	ldr	r0, [pc, #516]	; (8000b28 <fsm_automatic_run+0x304>)
 8000924:	f003 ffc2 	bl	80048ac <puts>
		}
		if(isButton3Pressed()== 1) {
 8000928:	f7ff fc34 	bl	8000194 <isButton3Pressed>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d10e      	bne.n	8000950 <fsm_automatic_run+0x12c>
			led_status= TUNING_RED;
 8000932:	4b74      	ldr	r3, [pc, #464]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000934:	2213      	movs	r2, #19
 8000936:	601a      	str	r2, [r3, #0]
			printf("Button 3 Pressed: Tuning mode\r\n");
 8000938:	487c      	ldr	r0, [pc, #496]	; (8000b2c <fsm_automatic_run+0x308>)
 800093a:	f003 ffb7 	bl	80048ac <puts>
			printf("Press button 1 to increase time length\r\n");
 800093e:	487c      	ldr	r0, [pc, #496]	; (8000b30 <fsm_automatic_run+0x30c>)
 8000940:	f003 ffb4 	bl	80048ac <puts>
			printf("Press button 2 to set\r\n");
 8000944:	487b      	ldr	r0, [pc, #492]	; (8000b34 <fsm_automatic_run+0x310>)
 8000946:	f003 ffb1 	bl	80048ac <puts>
			printf("Tuning red\r\n");
 800094a:	487b      	ldr	r0, [pc, #492]	; (8000b38 <fsm_automatic_run+0x314>)
 800094c:	f003 ffae 	bl	80048ac <puts>

		}
		if(isButton4Pressed()== 1) {
 8000950:	f7ff fc32 	bl	80001b8 <isButton4Pressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	f040 815e 	bne.w	8000c18 <fsm_automatic_run+0x3f4>
			led_status= INIT1;
 800095c:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <fsm_automatic_run+0x2e0>)
 800095e:	2216      	movs	r2, #22
 8000960:	601a      	str	r2, [r3, #0]
			printf("Button 4 Pressed: Pedestrian mode\r\n");
 8000962:	4876      	ldr	r0, [pc, #472]	; (8000b3c <fsm_automatic_run+0x318>)
 8000964:	f003 ffa2 	bl	80048ac <puts>
			setTimer1(200);
 8000968:	20c8      	movs	r0, #200	; 0xc8
 800096a:	f000 fe57 	bl	800161c <setTimer1>
	    }
		break;
 800096e:	e153      	b.n	8000c18 <fsm_automatic_run+0x3f4>

	case AUTO_RED_YELLOW:
		if(timer1_flag == 1) {
 8000970:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <fsm_automatic_run+0x2e4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d11b      	bne.n	80009b0 <fsm_automatic_run+0x18c>
			led_status = AUTO_GREEN_RED;
 8000978:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <fsm_automatic_run+0x2e0>)
 800097a:	2207      	movs	r2, #7
 800097c:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 800097e:	4b63      	ldr	r3, [pc, #396]	; (8000b0c <fsm_automatic_run+0x2e8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3303      	adds	r3, #3
 8000984:	2264      	movs	r2, #100	; 0x64
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fe46 	bl	800161c <setTimer1>
			count=0;
 8000990:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
			printf("GREEN-RED: %d\r\n",GREEN+counter_green-count);
 8000996:	4b5d      	ldr	r3, [pc, #372]	; (8000b0c <fsm_automatic_run+0x2e8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1cda      	adds	r2, r3, #3
 800099c:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <fsm_automatic_run+0x2f0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4619      	mov	r1, r3
 80009a4:	4866      	ldr	r0, [pc, #408]	; (8000b40 <fsm_automatic_run+0x31c>)
 80009a6:	f003 fefb 	bl	80047a0 <iprintf>
			setTimer2(100);
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f000 fe4a 	bl	8001644 <setTimer2>
		}
		if(timer2_flag == 1){
 80009b0:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <fsm_automatic_run+0x300>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d111      	bne.n	80009dc <fsm_automatic_run+0x1b8>
			count++;
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a55      	ldr	r2, [pc, #340]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80009c0:	6013      	str	r3, [r2, #0]
			printf("RED-YELLOW: %d\r\n",YELLOW+counter_yellow-count);
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <fsm_automatic_run+0x2f8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1c9a      	adds	r2, r3, #2
 80009c8:	4b52      	ldr	r3, [pc, #328]	; (8000b14 <fsm_automatic_run+0x2f0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	4853      	ldr	r0, [pc, #332]	; (8000b20 <fsm_automatic_run+0x2fc>)
 80009d2:	f003 fee5 	bl	80047a0 <iprintf>
			setTimer2(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f000 fe34 	bl	8001644 <setTimer2>
		}
		if(isButton2Pressed() == 1) {
 80009dc:	f7ff fbc8 	bl	8000170 <isButton2Pressed>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d105      	bne.n	80009f2 <fsm_automatic_run+0x1ce>
			led_status= MANUAL_RED_GREEN;
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <fsm_automatic_run+0x2e0>)
 80009e8:	220e      	movs	r2, #14
 80009ea:	601a      	str	r2, [r3, #0]
			printf("Button 2 Pressed: Manual mode\r\n");
 80009ec:	484e      	ldr	r0, [pc, #312]	; (8000b28 <fsm_automatic_run+0x304>)
 80009ee:	f003 ff5d 	bl	80048ac <puts>
	    }
		if(isButton3Pressed()== 1) {
 80009f2:	f7ff fbcf 	bl	8000194 <isButton3Pressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10e      	bne.n	8000a1a <fsm_automatic_run+0x1f6>
			led_status= TUNING_RED;
 80009fc:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <fsm_automatic_run+0x2e0>)
 80009fe:	2213      	movs	r2, #19
 8000a00:	601a      	str	r2, [r3, #0]
			printf("Button 3 Pressed: Tuning mode\r\n");
 8000a02:	484a      	ldr	r0, [pc, #296]	; (8000b2c <fsm_automatic_run+0x308>)
 8000a04:	f003 ff52 	bl	80048ac <puts>
			printf("Press button 1 to increase time length\r\n");
 8000a08:	4849      	ldr	r0, [pc, #292]	; (8000b30 <fsm_automatic_run+0x30c>)
 8000a0a:	f003 ff4f 	bl	80048ac <puts>
			printf("Press button 2 to set\r\n");
 8000a0e:	4849      	ldr	r0, [pc, #292]	; (8000b34 <fsm_automatic_run+0x310>)
 8000a10:	f003 ff4c 	bl	80048ac <puts>
			printf("Tuning red\r\n");
 8000a14:	4848      	ldr	r0, [pc, #288]	; (8000b38 <fsm_automatic_run+0x314>)
 8000a16:	f003 ff49 	bl	80048ac <puts>
		}
		if(isButton4Pressed()== 1) {
 8000a1a:	f7ff fbcd 	bl	80001b8 <isButton4Pressed>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	f040 80fb 	bne.w	8000c1c <fsm_automatic_run+0x3f8>
			led_status= INIT1;
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000a28:	2216      	movs	r2, #22
 8000a2a:	601a      	str	r2, [r3, #0]
			printf("Button 4 Pressed: Pedestrian mode\r\n");
 8000a2c:	4843      	ldr	r0, [pc, #268]	; (8000b3c <fsm_automatic_run+0x318>)
 8000a2e:	f003 ff3d 	bl	80048ac <puts>
			setTimer1(200);
 8000a32:	20c8      	movs	r0, #200	; 0xc8
 8000a34:	f000 fdf2 	bl	800161c <setTimer1>
	    }
		break;
 8000a38:	e0f0      	b.n	8000c1c <fsm_automatic_run+0x3f8>

	case AUTO_GREEN_RED:
		if(timer1_flag == 1) {
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <fsm_automatic_run+0x2e4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d11b      	bne.n	8000a7a <fsm_automatic_run+0x256>
			led_status = AUTO_YELLOW_RED;
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000a44:	2208      	movs	r2, #8
 8000a46:	601a      	str	r2, [r3, #0]
			setTimer1((YELLOW+counter_yellow)*100);
 8000a48:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <fsm_automatic_run+0x2f8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	2264      	movs	r2, #100	; 0x64
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fde1 	bl	800161c <setTimer1>
			count=0;
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
			printf("YELLOW-RED: %d\r\n",YELLOW+counter_yellow-count);
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <fsm_automatic_run+0x2f8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	1c9a      	adds	r2, r3, #2
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4835      	ldr	r0, [pc, #212]	; (8000b44 <fsm_automatic_run+0x320>)
 8000a70:	f003 fe96 	bl	80047a0 <iprintf>
			setTimer2(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f000 fde5 	bl	8001644 <setTimer2>
		}
		if(timer2_flag == 1){
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <fsm_automatic_run+0x300>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d111      	bne.n	8000aa6 <fsm_automatic_run+0x282>
			count++;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000a8a:	6013      	str	r3, [r2, #0]
			printf("GREEN-RED: %d\r\n",GREEN+counter_green-count);
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <fsm_automatic_run+0x2e8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1cda      	adds	r2, r3, #3
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <fsm_automatic_run+0x2f0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4829      	ldr	r0, [pc, #164]	; (8000b40 <fsm_automatic_run+0x31c>)
 8000a9c:	f003 fe80 	bl	80047a0 <iprintf>
			setTimer2(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f000 fdcf 	bl	8001644 <setTimer2>
		}
		if(isButton2Pressed()== 1) {
 8000aa6:	f7ff fb63 	bl	8000170 <isButton2Pressed>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d105      	bne.n	8000abc <fsm_automatic_run+0x298>
			led_status= MANUAL_RED_GREEN;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000ab2:	220e      	movs	r2, #14
 8000ab4:	601a      	str	r2, [r3, #0]
			printf("Button 2 Pressed: Manual mode\r\n");
 8000ab6:	481c      	ldr	r0, [pc, #112]	; (8000b28 <fsm_automatic_run+0x304>)
 8000ab8:	f003 fef8 	bl	80048ac <puts>
	    }
		if(isButton3Pressed()== 1) {
 8000abc:	f7ff fb6a 	bl	8000194 <isButton3Pressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d10e      	bne.n	8000ae4 <fsm_automatic_run+0x2c0>
			led_status= TUNING_RED;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000ac8:	2213      	movs	r2, #19
 8000aca:	601a      	str	r2, [r3, #0]
			printf("Button 3 Pressed: Tuning mode\r\n");
 8000acc:	4817      	ldr	r0, [pc, #92]	; (8000b2c <fsm_automatic_run+0x308>)
 8000ace:	f003 feed 	bl	80048ac <puts>
			printf("Press button 1 to increase time length\r\n");
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <fsm_automatic_run+0x30c>)
 8000ad4:	f003 feea 	bl	80048ac <puts>
			printf("Press button 2 to set\r\n");
 8000ad8:	4816      	ldr	r0, [pc, #88]	; (8000b34 <fsm_automatic_run+0x310>)
 8000ada:	f003 fee7 	bl	80048ac <puts>
			printf("Tuning red\r\n");
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <fsm_automatic_run+0x314>)
 8000ae0:	f003 fee4 	bl	80048ac <puts>
		}
		if(isButton4Pressed()== 1) {
 8000ae4:	f7ff fb68 	bl	80001b8 <isButton4Pressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	f040 8098 	bne.w	8000c20 <fsm_automatic_run+0x3fc>
			led_status= INIT1;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <fsm_automatic_run+0x2e0>)
 8000af2:	2216      	movs	r2, #22
 8000af4:	601a      	str	r2, [r3, #0]
			printf("Button 4 Pressed: Pedestrian mode\r\n");
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <fsm_automatic_run+0x318>)
 8000af8:	f003 fed8 	bl	80048ac <puts>
			setTimer1(200);
 8000afc:	20c8      	movs	r0, #200	; 0xc8
 8000afe:	f000 fd8d 	bl	800161c <setTimer1>
	    }
		break;
 8000b02:	e08d      	b.n	8000c20 <fsm_automatic_run+0x3fc>
 8000b04:	200000e0 	.word	0x200000e0
 8000b08:	20000100 	.word	0x20000100
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	08005764 	.word	0x08005764
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	08005770 	.word	0x08005770
 8000b1c:	200000ec 	.word	0x200000ec
 8000b20:	08005780 	.word	0x08005780
 8000b24:	20000108 	.word	0x20000108
 8000b28:	08005794 	.word	0x08005794
 8000b2c:	080057b4 	.word	0x080057b4
 8000b30:	080057d4 	.word	0x080057d4
 8000b34:	080057fc 	.word	0x080057fc
 8000b38:	08005814 	.word	0x08005814
 8000b3c:	08005820 	.word	0x08005820
 8000b40:	08005844 	.word	0x08005844
 8000b44:	08005854 	.word	0x08005854

	case AUTO_YELLOW_RED:
		if(timer1_flag == 1) {
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <fsm_automatic_run+0x408>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d11b      	bne.n	8000b88 <fsm_automatic_run+0x364>
			led_status = AUTO_RED_GREEN;
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <fsm_automatic_run+0x40c>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <fsm_automatic_run+0x410>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3303      	adds	r3, #3
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fd5a 	bl	800161c <setTimer1>
			count=0;
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <fsm_automatic_run+0x414>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
			printf("RED-GREEN: %d\r\n",GREEN+counter_green-count);
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <fsm_automatic_run+0x410>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1cda      	adds	r2, r3, #3
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <fsm_automatic_run+0x414>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482f      	ldr	r0, [pc, #188]	; (8000c3c <fsm_automatic_run+0x418>)
 8000b7e:	f003 fe0f 	bl	80047a0 <iprintf>
			setTimer2(100);
 8000b82:	2064      	movs	r0, #100	; 0x64
 8000b84:	f000 fd5e 	bl	8001644 <setTimer2>
		}
		if(timer2_flag == 1){
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <fsm_automatic_run+0x41c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d111      	bne.n	8000bb4 <fsm_automatic_run+0x390>
			count++;
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <fsm_automatic_run+0x414>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <fsm_automatic_run+0x414>)
 8000b98:	6013      	str	r3, [r2, #0]
			printf("YELLOW-RED: %d\r\n",YELLOW+counter_yellow-count);
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <fsm_automatic_run+0x420>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1c9a      	adds	r2, r3, #2
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <fsm_automatic_run+0x414>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4827      	ldr	r0, [pc, #156]	; (8000c48 <fsm_automatic_run+0x424>)
 8000baa:	f003 fdf9 	bl	80047a0 <iprintf>
			setTimer2(100);
 8000bae:	2064      	movs	r0, #100	; 0x64
 8000bb0:	f000 fd48 	bl	8001644 <setTimer2>
		}
		if(isButton2Pressed()== 1) {
 8000bb4:	f7ff fadc 	bl	8000170 <isButton2Pressed>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d105      	bne.n	8000bca <fsm_automatic_run+0x3a6>
			led_status= MANUAL_RED_GREEN;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <fsm_automatic_run+0x40c>)
 8000bc0:	220e      	movs	r2, #14
 8000bc2:	601a      	str	r2, [r3, #0]
			printf("Button 2 Pressed: Manual mode\r\n");
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <fsm_automatic_run+0x428>)
 8000bc6:	f003 fe71 	bl	80048ac <puts>
	    }
		if(isButton3Pressed()== 1) {
 8000bca:	f7ff fae3 	bl	8000194 <isButton3Pressed>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10e      	bne.n	8000bf2 <fsm_automatic_run+0x3ce>
			led_status= TUNING_RED;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <fsm_automatic_run+0x40c>)
 8000bd6:	2213      	movs	r2, #19
 8000bd8:	601a      	str	r2, [r3, #0]
			printf("Button 3 Pressed: Tuning mode\r\n");
 8000bda:	481d      	ldr	r0, [pc, #116]	; (8000c50 <fsm_automatic_run+0x42c>)
 8000bdc:	f003 fe66 	bl	80048ac <puts>
			printf("Press button 1 to increase time length\r\n");
 8000be0:	481c      	ldr	r0, [pc, #112]	; (8000c54 <fsm_automatic_run+0x430>)
 8000be2:	f003 fe63 	bl	80048ac <puts>
			printf("Press button 2 to set\r\n");
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <fsm_automatic_run+0x434>)
 8000be8:	f003 fe60 	bl	80048ac <puts>
			printf("Tuning red\r\n");
 8000bec:	481b      	ldr	r0, [pc, #108]	; (8000c5c <fsm_automatic_run+0x438>)
 8000bee:	f003 fe5d 	bl	80048ac <puts>
		}
		if(isButton4Pressed()== 1) {
 8000bf2:	f7ff fae1 	bl	80001b8 <isButton4Pressed>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d113      	bne.n	8000c24 <fsm_automatic_run+0x400>
			led_status= INIT1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <fsm_automatic_run+0x40c>)
 8000bfe:	2216      	movs	r2, #22
 8000c00:	601a      	str	r2, [r3, #0]
			printf("Button 4 Pressed: Pedestrian mode\r\n");
 8000c02:	4817      	ldr	r0, [pc, #92]	; (8000c60 <fsm_automatic_run+0x43c>)
 8000c04:	f003 fe52 	bl	80048ac <puts>
			setTimer1(200);
 8000c08:	20c8      	movs	r0, #200	; 0xc8
 8000c0a:	f000 fd07 	bl	800161c <setTimer1>
	    }
		break;
 8000c0e:	e009      	b.n	8000c24 <fsm_automatic_run+0x400>

	default:
		break;
 8000c10:	bf00      	nop
 8000c12:	e008      	b.n	8000c26 <fsm_automatic_run+0x402>
		break;
 8000c14:	bf00      	nop
 8000c16:	e006      	b.n	8000c26 <fsm_automatic_run+0x402>
		break;
 8000c18:	bf00      	nop
 8000c1a:	e004      	b.n	8000c26 <fsm_automatic_run+0x402>
		break;
 8000c1c:	bf00      	nop
 8000c1e:	e002      	b.n	8000c26 <fsm_automatic_run+0x402>
		break;
 8000c20:	bf00      	nop
 8000c22:	e000      	b.n	8000c26 <fsm_automatic_run+0x402>
		break;
 8000c24:	bf00      	nop
	}
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000100 	.word	0x20000100
 8000c30:	200000e0 	.word	0x200000e0
 8000c34:	200000e8 	.word	0x200000e8
 8000c38:	200000f4 	.word	0x200000f4
 8000c3c:	08005770 	.word	0x08005770
 8000c40:	20000108 	.word	0x20000108
 8000c44:	200000ec 	.word	0x200000ec
 8000c48:	08005854 	.word	0x08005854
 8000c4c:	08005794 	.word	0x08005794
 8000c50:	080057b4 	.word	0x080057b4
 8000c54:	080057d4 	.word	0x080057d4
 8000c58:	080057fc 	.word	0x080057fc
 8000c5c:	08005814 	.word	0x08005814
 8000c60:	08005820 	.word	0x08005820

08000c64 <fsm_manual_run>:
 *      Author: PC
 */

#include "global.h"

void fsm_manual_run(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	switch(led_status){
 8000c68:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <fsm_manual_run+0xc4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3b0e      	subs	r3, #14
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d84e      	bhi.n	8000d10 <fsm_manual_run+0xac>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <fsm_manual_run+0x14>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000c89 	.word	0x08000c89
 8000c7c:	08000cab 	.word	0x08000cab
 8000c80:	08000ccd 	.word	0x08000ccd
 8000c84:	08000cef 	.word	0x08000cef
	case MANUAL_RED_GREEN:
		if(isButton1Pressed()==1){
 8000c88:	f7ff fa60 	bl	800014c <isButton1Pressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d102      	bne.n	8000c98 <fsm_manual_run+0x34>
			led_status=INIT;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <fsm_manual_run+0xc4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]
		}
		if(isButton2Pressed()==1){
 8000c98:	f7ff fa6a 	bl	8000170 <isButton2Pressed>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d138      	bne.n	8000d14 <fsm_manual_run+0xb0>
			led_status=MANUAL_RED_YELLOW;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <fsm_manual_run+0xc4>)
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ca8:	e034      	b.n	8000d14 <fsm_manual_run+0xb0>
	case MANUAL_RED_YELLOW:
		if(isButton1Pressed()==1){
 8000caa:	f7ff fa4f 	bl	800014c <isButton1Pressed>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d102      	bne.n	8000cba <fsm_manual_run+0x56>
			led_status=INIT;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <fsm_manual_run+0xc4>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
		}
		if(isButton2Pressed()==1){
 8000cba:	f7ff fa59 	bl	8000170 <isButton2Pressed>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d129      	bne.n	8000d18 <fsm_manual_run+0xb4>
			led_status=MANUAL_GREEN_RED;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <fsm_manual_run+0xc4>)
 8000cc6:	2210      	movs	r2, #16
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cca:	e025      	b.n	8000d18 <fsm_manual_run+0xb4>
	case MANUAL_GREEN_RED:
		if(isButton1Pressed()==1){
 8000ccc:	f7ff fa3e 	bl	800014c <isButton1Pressed>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d102      	bne.n	8000cdc <fsm_manual_run+0x78>
			led_status=INIT;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <fsm_manual_run+0xc4>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
		}
		if(isButton2Pressed()==1){
 8000cdc:	f7ff fa48 	bl	8000170 <isButton2Pressed>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d11a      	bne.n	8000d1c <fsm_manual_run+0xb8>
			led_status=MANUAL_YELLOW_RED;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <fsm_manual_run+0xc4>)
 8000ce8:	2211      	movs	r2, #17
 8000cea:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cec:	e016      	b.n	8000d1c <fsm_manual_run+0xb8>
	case MANUAL_YELLOW_RED:
		if(isButton1Pressed()==1){
 8000cee:	f7ff fa2d 	bl	800014c <isButton1Pressed>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d102      	bne.n	8000cfe <fsm_manual_run+0x9a>
			led_status=INIT;
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <fsm_manual_run+0xc4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
		}
		if(isButton2Pressed()==1){
 8000cfe:	f7ff fa37 	bl	8000170 <isButton2Pressed>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10b      	bne.n	8000d20 <fsm_manual_run+0xbc>
			led_status=MANUAL_RED_GREEN;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <fsm_manual_run+0xc4>)
 8000d0a:	220e      	movs	r2, #14
 8000d0c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d0e:	e007      	b.n	8000d20 <fsm_manual_run+0xbc>
	default:
		break;
 8000d10:	bf00      	nop
 8000d12:	e006      	b.n	8000d22 <fsm_manual_run+0xbe>
		break;
 8000d14:	bf00      	nop
 8000d16:	e004      	b.n	8000d22 <fsm_manual_run+0xbe>
		break;
 8000d18:	bf00      	nop
 8000d1a:	e002      	b.n	8000d22 <fsm_manual_run+0xbe>
		break;
 8000d1c:	bf00      	nop
 8000d1e:	e000      	b.n	8000d22 <fsm_manual_run+0xbe>
		break;
 8000d20:	bf00      	nop
	}
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000e0 	.word	0x200000e0

08000d2c <fsm_pedestrian>:
 *  Created on: Dec 8, 2023
 *      Author: PC
 */
#include "global.h"

void fsm_pedestrian(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	switch(led_status){
 8000d30:	4b94      	ldr	r3, [pc, #592]	; (8000f84 <fsm_pedestrian+0x258>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3b16      	subs	r3, #22
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	f200 8184 	bhi.w	8001044 <fsm_pedestrian+0x318>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <fsm_pedestrian+0x18>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000da3 	.word	0x08000da3
 8000d4c:	08000e3b 	.word	0x08000e3b
 8000d50:	08000eed 	.word	0x08000eed
 8000d54:	08000fc5 	.word	0x08000fc5
	case INIT1:
		if(timer1_flag==1){
 8000d58:	4b8b      	ldr	r3, [pc, #556]	; (8000f88 <fsm_pedestrian+0x25c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	f040 8173 	bne.w	8001048 <fsm_pedestrian+0x31c>
			led_status = PEDES_RED_GREEN;
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <fsm_pedestrian+0x258>)
 8000d64:	2217      	movs	r2, #23
 8000d66:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 8000d68:	4b88      	ldr	r3, [pc, #544]	; (8000f8c <fsm_pedestrian+0x260>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3303      	adds	r3, #3
 8000d6e:	2264      	movs	r2, #100	; 0x64
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fc51 	bl	800161c <setTimer1>
			printf("PEDES mode\r\n");
 8000d7a:	4885      	ldr	r0, [pc, #532]	; (8000f90 <fsm_pedestrian+0x264>)
 8000d7c:	f003 fd96 	bl	80048ac <puts>
			count=0;
 8000d80:	4b84      	ldr	r3, [pc, #528]	; (8000f94 <fsm_pedestrian+0x268>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
			printf("RED-GREEN: %d\r\n",GREEN+counter_green-count);
 8000d86:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <fsm_pedestrian+0x260>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1cda      	adds	r2, r3, #3
 8000d8c:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <fsm_pedestrian+0x268>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	4880      	ldr	r0, [pc, #512]	; (8000f98 <fsm_pedestrian+0x26c>)
 8000d96:	f003 fd03 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f000 fc66 	bl	800166c <setTimer3>
		}
		break;
 8000da0:	e152      	b.n	8001048 <fsm_pedestrian+0x31c>

	case PEDES_RED_GREEN:
		if(timer1_flag == 1) {
 8000da2:	4b79      	ldr	r3, [pc, #484]	; (8000f88 <fsm_pedestrian+0x25c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d12f      	bne.n	8000e0a <fsm_pedestrian+0xde>
			led_status = PEDES_RED_YELLOW;
 8000daa:	4b76      	ldr	r3, [pc, #472]	; (8000f84 <fsm_pedestrian+0x258>)
 8000dac:	2218      	movs	r2, #24
 8000dae:	601a      	str	r2, [r3, #0]
			setTimer1((YELLOW+counter_yellow)*100);
 8000db0:	4b7a      	ldr	r3, [pc, #488]	; (8000f9c <fsm_pedestrian+0x270>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	2264      	movs	r2, #100	; 0x64
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fc2d 	bl	800161c <setTimer1>

			HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4876      	ldr	r0, [pc, #472]	; (8000fa0 <fsm_pedestrian+0x274>)
 8000dc6:	f001 ffc5 	bl	8002d54 <HAL_TIM_PWM_Start>
			setTimer2(60);
 8000dca:	203c      	movs	r0, #60	; 0x3c
 8000dcc:	f000 fc3a 	bl	8001644 <setTimer2>
			count=0;
 8000dd0:	4b70      	ldr	r3, [pc, #448]	; (8000f94 <fsm_pedestrian+0x268>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
			printf("RED-YELLOW: %d\r\n",YELLOW+counter_yellow-count);
 8000dd6:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <fsm_pedestrian+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1c9a      	adds	r2, r3, #2
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <fsm_pedestrian+0x268>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	486f      	ldr	r0, [pc, #444]	; (8000fa4 <fsm_pedestrian+0x278>)
 8000de6:	f003 fcdb 	bl	80047a0 <iprintf>
			printf("TIME TO GO: %d\r\n",YELLOW+counter_yellow-count);
 8000dea:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <fsm_pedestrian+0x270>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1c9a      	adds	r2, r3, #2
 8000df0:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <fsm_pedestrian+0x268>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	486b      	ldr	r0, [pc, #428]	; (8000fa8 <fsm_pedestrian+0x27c>)
 8000dfa:	f003 fcd1 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f000 fc34 	bl	800166c <setTimer3>
			setTimer4(61);
 8000e04:	203d      	movs	r0, #61	; 0x3d
 8000e06:	f000 fc45 	bl	8001694 <setTimer4>
		}
		if(timer3_flag == 1){
 8000e0a:	4b68      	ldr	r3, [pc, #416]	; (8000fac <fsm_pedestrian+0x280>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	f040 811c 	bne.w	800104c <fsm_pedestrian+0x320>
			count++;
 8000e14:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <fsm_pedestrian+0x268>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	; (8000f94 <fsm_pedestrian+0x268>)
 8000e1c:	6013      	str	r3, [r2, #0]
			printf("RED-GREEN: %d\r\n",GREEN+counter_green-count);
 8000e1e:	4b5b      	ldr	r3, [pc, #364]	; (8000f8c <fsm_pedestrian+0x260>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1cda      	adds	r2, r3, #3
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <fsm_pedestrian+0x268>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	485a      	ldr	r0, [pc, #360]	; (8000f98 <fsm_pedestrian+0x26c>)
 8000e2e:	f003 fcb7 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f000 fc1a 	bl	800166c <setTimer3>
		}
		break;
 8000e38:	e108      	b.n	800104c <fsm_pedestrian+0x320>

	case PEDES_RED_YELLOW:
		if(timer1_flag == 1) {
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <fsm_pedestrian+0x25c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d11d      	bne.n	8000e7e <fsm_pedestrian+0x152>
			led_status = PEDES_GREEN_RED;
 8000e42:	4b50      	ldr	r3, [pc, #320]	; (8000f84 <fsm_pedestrian+0x258>)
 8000e44:	2219      	movs	r2, #25
 8000e46:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 8000e48:	4b50      	ldr	r3, [pc, #320]	; (8000f8c <fsm_pedestrian+0x260>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	2264      	movs	r2, #100	; 0x64
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fbe1 	bl	800161c <setTimer1>
			count=0;
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <fsm_pedestrian+0x268>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
			buzzer_off();
 8000e60:	f7ff fcd0 	bl	8000804 <buzzer_off>
			printf("GREEN-RED: %d\r\n",GREEN+counter_green-count);
 8000e64:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <fsm_pedestrian+0x260>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1cda      	adds	r2, r3, #3
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <fsm_pedestrian+0x268>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	484f      	ldr	r0, [pc, #316]	; (8000fb0 <fsm_pedestrian+0x284>)
 8000e74:	f003 fc94 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000e78:	2064      	movs	r0, #100	; 0x64
 8000e7a:	f000 fbf7 	bl	800166c <setTimer3>
		}
		if(timer2_flag==1){
 8000e7e:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <fsm_pedestrian+0x288>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d107      	bne.n	8000e96 <fsm_pedestrian+0x16a>
			buzzer_input+=70;
 8000e86:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <fsm_pedestrian+0x28c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3346      	adds	r3, #70	; 0x46
 8000e8c:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <fsm_pedestrian+0x28c>)
 8000e8e:	6013      	str	r3, [r2, #0]
			setTimer2(60);
 8000e90:	203c      	movs	r0, #60	; 0x3c
 8000e92:	f000 fbd7 	bl	8001644 <setTimer2>
		}
		if(timer3_flag == 1){
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <fsm_pedestrian+0x280>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d11b      	bne.n	8000ed6 <fsm_pedestrian+0x1aa>
			count++;
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <fsm_pedestrian+0x268>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a3b      	ldr	r2, [pc, #236]	; (8000f94 <fsm_pedestrian+0x268>)
 8000ea6:	6013      	str	r3, [r2, #0]
			printf("RED-YELLOW: %d\r\n",YELLOW+counter_yellow-count);
 8000ea8:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <fsm_pedestrian+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1c9a      	adds	r2, r3, #2
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <fsm_pedestrian+0x268>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <fsm_pedestrian+0x278>)
 8000eb8:	f003 fc72 	bl	80047a0 <iprintf>
			printf("TIME TO GO: %d\r\n",YELLOW+counter_yellow-count);
 8000ebc:	4b37      	ldr	r3, [pc, #220]	; (8000f9c <fsm_pedestrian+0x270>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	1c9a      	adds	r2, r3, #2
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <fsm_pedestrian+0x268>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4837      	ldr	r0, [pc, #220]	; (8000fa8 <fsm_pedestrian+0x27c>)
 8000ecc:	f003 fc68 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f000 fbcb 	bl	800166c <setTimer3>
		}
		if(timer4_flag==1){
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <fsm_pedestrian+0x290>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	f040 80b8 	bne.w	8001050 <fsm_pedestrian+0x324>
			buzzeroff();
 8000ee0:	f7ff fc3c 	bl	800075c <buzzeroff>
			setTimer4(60);
 8000ee4:	203c      	movs	r0, #60	; 0x3c
 8000ee6:	f000 fbd5 	bl	8001694 <setTimer4>
		}
		break;
 8000eea:	e0b1      	b.n	8001050 <fsm_pedestrian+0x324>

	case PEDES_GREEN_RED:
		if(timer1_flag == 1) {
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <fsm_pedestrian+0x25c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d12f      	bne.n	8000f54 <fsm_pedestrian+0x228>
			led_status = PEDES_YELLOW_RED;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <fsm_pedestrian+0x258>)
 8000ef6:	221a      	movs	r2, #26
 8000ef8:	601a      	str	r2, [r3, #0]
			setTimer1((YELLOW+counter_yellow)*100);
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <fsm_pedestrian+0x270>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3302      	adds	r3, #2
 8000f00:	2264      	movs	r2, #100	; 0x64
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fb88 	bl	800161c <setTimer1>

			HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <fsm_pedestrian+0x274>)
 8000f10:	f001 ff20 	bl	8002d54 <HAL_TIM_PWM_Start>
			setTimer2(60);
 8000f14:	203c      	movs	r0, #60	; 0x3c
 8000f16:	f000 fb95 	bl	8001644 <setTimer2>
			count=0;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <fsm_pedestrian+0x268>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
			printf("YELLOW-RED: %d\r\n",YELLOW+counter_yellow-count);
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <fsm_pedestrian+0x270>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1c9a      	adds	r2, r3, #2
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <fsm_pedestrian+0x268>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <fsm_pedestrian+0x294>)
 8000f30:	f003 fc36 	bl	80047a0 <iprintf>
			printf("TIME TO GO: %d\r\n",YELLOW+counter_yellow-count);
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <fsm_pedestrian+0x270>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1c9a      	adds	r2, r3, #2
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <fsm_pedestrian+0x268>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <fsm_pedestrian+0x27c>)
 8000f44:	f003 fc2c 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f000 fb8f 	bl	800166c <setTimer3>
			setTimer4(61);
 8000f4e:	203d      	movs	r0, #61	; 0x3d
 8000f50:	f000 fba0 	bl	8001694 <setTimer4>
		}
		if(timer3_flag == 1){
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <fsm_pedestrian+0x280>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d17b      	bne.n	8001054 <fsm_pedestrian+0x328>
			count++;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <fsm_pedestrian+0x268>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <fsm_pedestrian+0x268>)
 8000f64:	6013      	str	r3, [r2, #0]
			printf("GREEN-RED: %d\r\n",GREEN+counter_green-count);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <fsm_pedestrian+0x260>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1cda      	adds	r2, r3, #3
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <fsm_pedestrian+0x268>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <fsm_pedestrian+0x284>)
 8000f76:	f003 fc13 	bl	80047a0 <iprintf>
			setTimer3(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f000 fb76 	bl	800166c <setTimer3>
		}
		break;
 8000f80:	e068      	b.n	8001054 <fsm_pedestrian+0x328>
 8000f82:	bf00      	nop
 8000f84:	200000e0 	.word	0x200000e0
 8000f88:	20000100 	.word	0x20000100
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	08005868 	.word	0x08005868
 8000f94:	200000f4 	.word	0x200000f4
 8000f98:	08005874 	.word	0x08005874
 8000f9c:	200000ec 	.word	0x200000ec
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	08005884 	.word	0x08005884
 8000fa8:	08005898 	.word	0x08005898
 8000fac:	20000110 	.word	0x20000110
 8000fb0:	080058ac 	.word	0x080058ac
 8000fb4:	20000108 	.word	0x20000108
 8000fb8:	200000f8 	.word	0x200000f8
 8000fbc:	20000118 	.word	0x20000118
 8000fc0:	080058bc 	.word	0x080058bc

	case PEDES_YELLOW_RED:
		if(timer1_flag == 1) {
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <fsm_pedestrian+0x334>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d105      	bne.n	8000fd8 <fsm_pedestrian+0x2ac>
			setTimer1(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f000 fb25 	bl	800161c <setTimer1>
			led_status = INIT;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <fsm_pedestrian+0x338>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1){
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <fsm_pedestrian+0x33c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <fsm_pedestrian+0x2c4>
			buzzer_input+=70;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <fsm_pedestrian+0x340>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3346      	adds	r3, #70	; 0x46
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <fsm_pedestrian+0x340>)
 8000fe8:	6013      	str	r3, [r2, #0]
			setTimer2(60);
 8000fea:	203c      	movs	r0, #60	; 0x3c
 8000fec:	f000 fb2a 	bl	8001644 <setTimer2>
		}
		if(timer3_flag == 1){
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <fsm_pedestrian+0x344>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d11b      	bne.n	8001030 <fsm_pedestrian+0x304>
			count++;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <fsm_pedestrian+0x348>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <fsm_pedestrian+0x348>)
 8001000:	6013      	str	r3, [r2, #0]
			printf("YELLOW-RED: %d\r\n",YELLOW+counter_yellow-count);
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <fsm_pedestrian+0x34c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1c9a      	adds	r2, r3, #2
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <fsm_pedestrian+0x348>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4619      	mov	r1, r3
 8001010:	481a      	ldr	r0, [pc, #104]	; (800107c <fsm_pedestrian+0x350>)
 8001012:	f003 fbc5 	bl	80047a0 <iprintf>
			printf("TIME TO GO: %d\r\n",YELLOW+counter_yellow-count);
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <fsm_pedestrian+0x34c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1c9a      	adds	r2, r3, #2
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <fsm_pedestrian+0x348>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <fsm_pedestrian+0x354>)
 8001026:	f003 fbbb 	bl	80047a0 <iprintf>
			setTimer3(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 fb1e 	bl	800166c <setTimer3>
		}
		if(timer4_flag==1){
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <fsm_pedestrian+0x358>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d10f      	bne.n	8001058 <fsm_pedestrian+0x32c>
			buzzeroff();
 8001038:	f7ff fb90 	bl	800075c <buzzeroff>
			setTimer4(60);
 800103c:	203c      	movs	r0, #60	; 0x3c
 800103e:	f000 fb29 	bl	8001694 <setTimer4>
		}
		break;
 8001042:	e009      	b.n	8001058 <fsm_pedestrian+0x32c>
	default:
		break;
 8001044:	bf00      	nop
 8001046:	e008      	b.n	800105a <fsm_pedestrian+0x32e>
		break;
 8001048:	bf00      	nop
 800104a:	e006      	b.n	800105a <fsm_pedestrian+0x32e>
		break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <fsm_pedestrian+0x32e>
		break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <fsm_pedestrian+0x32e>
		break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <fsm_pedestrian+0x32e>
		break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000100 	.word	0x20000100
 8001064:	200000e0 	.word	0x200000e0
 8001068:	20000108 	.word	0x20000108
 800106c:	200000f8 	.word	0x200000f8
 8001070:	20000110 	.word	0x20000110
 8001074:	200000f4 	.word	0x200000f4
 8001078:	200000ec 	.word	0x200000ec
 800107c:	080058bc 	.word	0x080058bc
 8001080:	08005898 	.word	0x08005898
 8001084:	20000118 	.word	0x20000118

08001088 <fsm_tuning_run>:
 *      Author: PC
 */

#include"global.h"

void fsm_tuning_run(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	switch(led_status){
 800108c:	4b65      	ldr	r3, [pc, #404]	; (8001224 <fsm_tuning_run+0x19c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b15      	cmp	r3, #21
 8001092:	f000 8083 	beq.w	800119c <fsm_tuning_run+0x114>
 8001096:	2b15      	cmp	r3, #21
 8001098:	f300 80bb 	bgt.w	8001212 <fsm_tuning_run+0x18a>
 800109c:	2b13      	cmp	r3, #19
 800109e:	d002      	beq.n	80010a6 <fsm_tuning_run+0x1e>
 80010a0:	2b14      	cmp	r3, #20
 80010a2:	d03d      	beq.n	8001120 <fsm_tuning_run+0x98>
			led_status=INIT;
			temp=0;
		}
		break;
	default:
		break;
 80010a4:	e0b5      	b.n	8001212 <fsm_tuning_run+0x18a>
		if(isButton1Pressed()==1){
 80010a6:	f7ff f851 	bl	800014c <isButton1Pressed>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10e      	bne.n	80010ce <fsm_tuning_run+0x46>
			printf("Value Increased\r\n");
 80010b0:	485d      	ldr	r0, [pc, #372]	; (8001228 <fsm_tuning_run+0x1a0>)
 80010b2:	f003 fbfb 	bl	80048ac <puts>
			if(counter_red+temp+RED<99){
 80010b6:	4b5d      	ldr	r3, [pc, #372]	; (800122c <fsm_tuning_run+0x1a4>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <fsm_tuning_run+0x1a8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	2b5d      	cmp	r3, #93	; 0x5d
 80010c2:	dc04      	bgt.n	80010ce <fsm_tuning_run+0x46>
				temp++;
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <fsm_tuning_run+0x1a8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a59      	ldr	r2, [pc, #356]	; (8001230 <fsm_tuning_run+0x1a8>)
 80010cc:	6013      	str	r3, [r2, #0]
		if(isButton2Pressed()==1){
 80010ce:	f7ff f84f 	bl	8000170 <isButton2Pressed>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d113      	bne.n	8001100 <fsm_tuning_run+0x78>
			printf("Value Set\r\n");
 80010d8:	4856      	ldr	r0, [pc, #344]	; (8001234 <fsm_tuning_run+0x1ac>)
 80010da:	f003 fbe7 	bl	80048ac <puts>
			counter_red+=temp;
 80010de:	4b53      	ldr	r3, [pc, #332]	; (800122c <fsm_tuning_run+0x1a4>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <fsm_tuning_run+0x1a8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a50      	ldr	r2, [pc, #320]	; (800122c <fsm_tuning_run+0x1a4>)
 80010ea:	6013      	str	r3, [r2, #0]
			temp=0;
 80010ec:	4b50      	ldr	r3, [pc, #320]	; (8001230 <fsm_tuning_run+0x1a8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
			counter_green=RED+counter_red-GREEN-YELLOW-counter_yellow;
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <fsm_tuning_run+0x1a4>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b50      	ldr	r3, [pc, #320]	; (8001238 <fsm_tuning_run+0x1b0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <fsm_tuning_run+0x1b4>)
 80010fe:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed()==1){
 8001100:	f7ff f848 	bl	8000194 <isButton3Pressed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	f040 8085 	bne.w	8001216 <fsm_tuning_run+0x18e>
			led_status=TUNING_YELLOW;
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <fsm_tuning_run+0x19c>)
 800110e:	2214      	movs	r2, #20
 8001110:	601a      	str	r2, [r3, #0]
			printf("Tuning yellow\r\n");
 8001112:	484b      	ldr	r0, [pc, #300]	; (8001240 <fsm_tuning_run+0x1b8>)
 8001114:	f003 fbca 	bl	80048ac <puts>
			temp=0;
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <fsm_tuning_run+0x1a8>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
		break;
 800111e:	e07a      	b.n	8001216 <fsm_tuning_run+0x18e>
		if(isButton1Pressed()==1){
 8001120:	f7ff f814 	bl	800014c <isButton1Pressed>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10e      	bne.n	8001148 <fsm_tuning_run+0xc0>
			printf("Value Increased\r\n");
 800112a:	483f      	ldr	r0, [pc, #252]	; (8001228 <fsm_tuning_run+0x1a0>)
 800112c:	f003 fbbe 	bl	80048ac <puts>
			if(counter_yellow+temp+YELLOW<99){
 8001130:	4b41      	ldr	r3, [pc, #260]	; (8001238 <fsm_tuning_run+0x1b0>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <fsm_tuning_run+0x1a8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4413      	add	r3, r2
 800113a:	2b60      	cmp	r3, #96	; 0x60
 800113c:	dc04      	bgt.n	8001148 <fsm_tuning_run+0xc0>
				temp++;
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <fsm_tuning_run+0x1a8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <fsm_tuning_run+0x1a8>)
 8001146:	6013      	str	r3, [r2, #0]
		if(isButton2Pressed()==1){
 8001148:	f7ff f812 	bl	8000170 <isButton2Pressed>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d115      	bne.n	800117e <fsm_tuning_run+0xf6>
			printf("Value Set\r\n");
 8001152:	4838      	ldr	r0, [pc, #224]	; (8001234 <fsm_tuning_run+0x1ac>)
 8001154:	f003 fbaa 	bl	80048ac <puts>
			counter_yellow+=temp;
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <fsm_tuning_run+0x1b0>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <fsm_tuning_run+0x1a8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4413      	add	r3, r2
 8001162:	4a35      	ldr	r2, [pc, #212]	; (8001238 <fsm_tuning_run+0x1b0>)
 8001164:	6013      	str	r3, [r2, #0]
			counter_red=YELLOW+GREEN+counter_yellow+counter_green-RED;
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <fsm_tuning_run+0x1b0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1d5a      	adds	r2, r3, #5
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <fsm_tuning_run+0x1b4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	3b05      	subs	r3, #5
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <fsm_tuning_run+0x1a4>)
 8001176:	6013      	str	r3, [r2, #0]
			temp=0;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <fsm_tuning_run+0x1a8>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed()==1){
 800117e:	f7ff f809 	bl	8000194 <isButton3Pressed>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d148      	bne.n	800121a <fsm_tuning_run+0x192>
			led_status=TUNING_GREEN;
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <fsm_tuning_run+0x19c>)
 800118a:	2215      	movs	r2, #21
 800118c:	601a      	str	r2, [r3, #0]
			printf("Tuning green\r\n");
 800118e:	482d      	ldr	r0, [pc, #180]	; (8001244 <fsm_tuning_run+0x1bc>)
 8001190:	f003 fb8c 	bl	80048ac <puts>
			temp=0;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <fsm_tuning_run+0x1a8>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
		break;
 800119a:	e03e      	b.n	800121a <fsm_tuning_run+0x192>
		if(isButton1Pressed()==1){
 800119c:	f7fe ffd6 	bl	800014c <isButton1Pressed>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10e      	bne.n	80011c4 <fsm_tuning_run+0x13c>
			printf("Value Increased\r\n");
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <fsm_tuning_run+0x1a0>)
 80011a8:	f003 fb80 	bl	80048ac <puts>
			if(counter_green+temp+GREEN<99){
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <fsm_tuning_run+0x1b4>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <fsm_tuning_run+0x1a8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	2b5f      	cmp	r3, #95	; 0x5f
 80011b8:	dc04      	bgt.n	80011c4 <fsm_tuning_run+0x13c>
				temp++;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <fsm_tuning_run+0x1a8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <fsm_tuning_run+0x1a8>)
 80011c2:	6013      	str	r3, [r2, #0]
		if(isButton2Pressed()==1){
 80011c4:	f7fe ffd4 	bl	8000170 <isButton2Pressed>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d115      	bne.n	80011fa <fsm_tuning_run+0x172>
			printf("Value Set\r\n");
 80011ce:	4819      	ldr	r0, [pc, #100]	; (8001234 <fsm_tuning_run+0x1ac>)
 80011d0:	f003 fb6c 	bl	80048ac <puts>
			counter_green+=temp;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <fsm_tuning_run+0x1b4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <fsm_tuning_run+0x1a8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <fsm_tuning_run+0x1b4>)
 80011e0:	6013      	str	r3, [r2, #0]
			counter_red=YELLOW+GREEN+counter_yellow+counter_green-RED;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <fsm_tuning_run+0x1b0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1d5a      	adds	r2, r3, #5
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <fsm_tuning_run+0x1b4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	3b05      	subs	r3, #5
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <fsm_tuning_run+0x1a4>)
 80011f2:	6013      	str	r3, [r2, #0]
			temp=0;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <fsm_tuning_run+0x1a8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed()==1){
 80011fa:	f7fe ffcb 	bl	8000194 <isButton3Pressed>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10c      	bne.n	800121e <fsm_tuning_run+0x196>
			led_status=INIT;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <fsm_tuning_run+0x19c>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
			temp=0;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <fsm_tuning_run+0x1a8>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
		break;
 8001210:	e005      	b.n	800121e <fsm_tuning_run+0x196>
		break;
 8001212:	bf00      	nop
 8001214:	e004      	b.n	8001220 <fsm_tuning_run+0x198>
		break;
 8001216:	bf00      	nop
 8001218:	e002      	b.n	8001220 <fsm_tuning_run+0x198>
		break;
 800121a:	bf00      	nop
 800121c:	e000      	b.n	8001220 <fsm_tuning_run+0x198>
		break;
 800121e:	bf00      	nop
	}
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000e0 	.word	0x200000e0
 8001228:	080058d0 	.word	0x080058d0
 800122c:	200000e4 	.word	0x200000e4
 8001230:	200000f0 	.word	0x200000f0
 8001234:	080058e4 	.word	0x080058e4
 8001238:	200000ec 	.word	0x200000ec
 800123c:	200000e8 	.word	0x200000e8
 8001240:	080058f0 	.word	0x080058f0
 8001244:	08005900 	.word	0x08005900

08001248 <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8001250:	1d39      	adds	r1, r7, #4
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	2201      	movs	r2, #1
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <__io_putchar+0x20>)
 8001258:	f002 fc9c 	bl	8003b94 <HAL_UART_Transmit>
 return ch;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200001b8 	.word	0x200001b8

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f000 fc92 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f81e 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f94a 	bl	8001510 <MX_GPIO_Init>
  MX_TIM2_Init();
 800127c:	f000 f85c 	bl	8001338 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001280:	f000 f8a6 	bl	80013d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001284:	f000 f91a 	bl	80014bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <main+0x40>)
 800128a:	f001 fcb9 	bl	8002c00 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  led_status=INIT;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <main+0x44>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
  setTimer1(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 f9c1 	bl	800161c <setTimer1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 800129a:	f7ff fac3 	bl	8000824 <fsm_automatic_run>
	  fsm_manual_run();
 800129e:	f7ff fce1 	bl	8000c64 <fsm_manual_run>
	  fsm_pedestrian();
 80012a2:	f7ff fd43 	bl	8000d2c <fsm_pedestrian>
	  fsm_tuning_run();
 80012a6:	f7ff feef 	bl	8001088 <fsm_tuning_run>
	  fsm_automatic_run();
 80012aa:	e7f6      	b.n	800129a <main+0x2e>
 80012ac:	20000170 	.word	0x20000170
 80012b0:	200000e0 	.word	0x200000e0

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2228      	movs	r2, #40	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fa64 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012de:	2310      	movs	r3, #16
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 f825 	bl	8002344 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001300:	f000 f986 	bl	8001610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fa90 	bl	8002844 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800132a:	f000 f971 	bl	8001610 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3740      	adds	r7, #64	; 0x40
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM2_Init+0x94>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM2_Init+0x94>)
 800135e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_TIM2_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM2_Init+0x94>)
 800136c:	2209      	movs	r2, #9
 800136e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM2_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM2_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_TIM2_Init+0x94>)
 800137e:	f001 fbef 	bl	8002b60 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001388:	f000 f942 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM2_Init+0x94>)
 800139a:	f001 ffab 	bl	80032f4 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 f934 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM2_Init+0x94>)
 80013b6:	f002 fb2d 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f000 f926 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000170 	.word	0x20000170

080013d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <MX_TIM3_Init+0xe8>)
 8001404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 983;
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001408:	f240 32d7 	movw	r2, #983	; 0x3d7
 800140c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001416:	22fe      	movs	r2, #254	; 0xfe
 8001418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_TIM3_Init+0xe4>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001428:	f001 fb9a 	bl	8002b60 <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001432:	f000 f8ed 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001440:	4619      	mov	r1, r3
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001444:	f001 ff56 	bl	80032f4 <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800144e:	f000 f8df 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001454:	f001 fc26 	bl	8002ca4 <HAL_TIM_PWM_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800145e:	f000 f8d7 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	4619      	mov	r1, r3
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001472:	f002 facf 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800147c:	f000 f8c8 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001480:	2360      	movs	r3, #96	; 0x60
 8001482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001498:	f001 fe6a 	bl	8003170 <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014a2:	f000 f8b5 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM3_Init+0xe4>)
 80014a8:	f000 f9e0 	bl	800186c <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000128 	.word	0x20000128
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f002 fafe 	bl	8003af4 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f000 f887 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001b8 	.word	0x200001b8
 800150c:	40004400 	.word	0x40004400

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_GPIO_Init+0xd0>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <MX_GPIO_Init+0xd0>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_GPIO_Init+0xd0>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <MX_GPIO_Init+0xd0>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <MX_GPIO_Init+0xd0>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <MX_GPIO_Init+0xd0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDES1_Pin|LED_GREEN1_Pin|LED_GREEN2_Pin|LED_RED2_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <MX_GPIO_Init+0xd4>)
 800155c:	f000 fed9 	bl	8002312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDES2_Pin|LED_RED1_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_GPIO_Init+0xd8>)
 8001568:	f000 fed3 	bl	8002312 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 800156c:	2313      	movs	r3, #19
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001574:	2301      	movs	r3, #1
 8001576:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4619      	mov	r1, r3
 800157e:	481a      	ldr	r0, [pc, #104]	; (80015e8 <MX_GPIO_Init+0xd8>)
 8001580:	f000 fd2c 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001584:	2301      	movs	r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4619      	mov	r1, r3
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_GPIO_Init+0xd4>)
 8001598:	f000 fd20 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES1_Pin LED_GREEN1_Pin LED_GREEN2_Pin LED_RED2_Pin */
  GPIO_InitStruct.Pin = PEDES1_Pin|LED_GREEN1_Pin|LED_GREEN2_Pin|LED_RED2_Pin;
 800159c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80015a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2302      	movs	r3, #2
 80015ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <MX_GPIO_Init+0xd4>)
 80015b6:	f000 fd11 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES2_Pin LED_RED1_Pin */
  GPIO_InitStruct.Pin = PEDES2_Pin|LED_RED1_Pin;
 80015ba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2302      	movs	r3, #2
 80015ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4619      	mov	r1, r3
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_GPIO_Init+0xd8>)
 80015d4:	f000 fd02 	bl	8001fdc <HAL_GPIO_Init>

}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40010800 	.word	0x40010800

080015ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	timerRun();
 80015f4:	f000 f862 	bl	80016bc <timerRun>
	getKeyInput1();
 80015f8:	f7fe fe20 	bl	800023c <getKeyInput1>
	getKeyInput2();
 80015fc:	f7fe fe72 	bl	80002e4 <getKeyInput2>
	getKeyInput3();
 8001600:	f7fe fec4 	bl	800038c <getKeyInput3>
	getKeyInput4();
 8001604:	f7fe ff16 	bl	8000434 <getKeyInput4>

}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <setTimer1>:
int timer3_flag=0;

int timer4_counter=0;
int timer4_flag=0;

void setTimer1(int duration){
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001624:	4a05      	ldr	r2, [pc, #20]	; (800163c <setTimer1+0x20>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <setTimer1+0x24>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200000fc 	.word	0x200000fc
 8001640:	20000100 	.word	0x20000100

08001644 <setTimer2>:

void setTimer2(int duration){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <setTimer2+0x20>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <setTimer2+0x24>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000104 	.word	0x20000104
 8001668:	20000108 	.word	0x20000108

0800166c <setTimer3>:

void setTimer3(int duration){
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <setTimer3+0x20>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <setTimer3+0x24>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000010c 	.word	0x2000010c
 8001690:	20000110 	.word	0x20000110

08001694 <setTimer4>:

void setTimer4(int duration){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <setTimer4+0x20>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <setTimer4+0x24>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000114 	.word	0x20000114
 80016b8:	20000118 	.word	0x20000118

080016bc <timerRun>:


void timerRun(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	traffic_light(led_status);
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <timerRun+0xa8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff09 	bl	80004dc <traffic_light>
	set_manual(led_status);
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <timerRun+0xa8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ffa8 	bl	8000624 <set_manual>
	set_tuning(led_status);
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <timerRun+0xa8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ffd5 	bl	8000688 <set_tuning>
	if(timer1_counter>0){
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <timerRun+0xac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dd0b      	ble.n	80016fe <timerRun+0x42>
		timer1_counter--;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <timerRun+0xac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <timerRun+0xac>)
 80016ee:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <timerRun+0xac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dc02      	bgt.n	80016fe <timerRun+0x42>
			timer1_flag=1;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <timerRun+0xb0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <timerRun+0xb4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	dd0b      	ble.n	800171e <timerRun+0x62>
		timer2_counter--;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <timerRun+0xb4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <timerRun+0xb4>)
 800170e:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <timerRun+0xb4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dc02      	bgt.n	800171e <timerRun+0x62>
			timer2_flag=1;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <timerRun+0xb8>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <timerRun+0xbc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	dd0b      	ble.n	800173e <timerRun+0x82>
		timer3_counter--;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <timerRun+0xbc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3b01      	subs	r3, #1
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <timerRun+0xbc>)
 800172e:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <timerRun+0xbc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dc02      	bgt.n	800173e <timerRun+0x82>
			timer3_flag=1;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <timerRun+0xc0>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter>0){
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <timerRun+0xc4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dd0b      	ble.n	800175e <timerRun+0xa2>
		timer4_counter--;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <timerRun+0xc4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3b01      	subs	r3, #1
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <timerRun+0xc4>)
 800174e:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0){
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <timerRun+0xc4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dc02      	bgt.n	800175e <timerRun+0xa2>
			timer4_flag=1;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <timerRun+0xc8>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200000e0 	.word	0x200000e0
 8001768:	200000fc 	.word	0x200000fc
 800176c:	20000100 	.word	0x20000100
 8001770:	20000104 	.word	0x20000104
 8001774:	20000108 	.word	0x20000108
 8001778:	2000010c 	.word	0x2000010c
 800177c:	20000110 	.word	0x20000110
 8001780:	20000114 	.word	0x20000114
 8001784:	20000118 	.word	0x20000118

08001788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_MspInit+0x5c>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_MspInit+0x5c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_MspInit+0x5c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_MspInit+0x5c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_MspInit+0x60>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_MspInit+0x60>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000

080017ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fc:	d114      	bne.n	8001828 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_TIM_Base_MspInit+0x78>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <HAL_TIM_Base_MspInit+0x78>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_TIM_Base_MspInit+0x78>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	201c      	movs	r0, #28
 800181c:	f000 faf5 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001820:	201c      	movs	r0, #28
 8001822:	f000 fb0e 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001826:	e018      	b.n	800185a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_TIM_Base_MspInit+0x7c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_TIM_Base_MspInit+0x78>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_TIM_Base_MspInit+0x78>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_TIM_Base_MspInit+0x78>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	201d      	movs	r0, #29
 8001850:	f000 fadb 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001854:	201d      	movs	r0, #29
 8001856:	f000 faf4 	bl	8001e42 <HAL_NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40000400 	.word	0x40000400

0800186c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_TIM_MspPostInit+0x58>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d117      	bne.n	80018bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_TIM_MspPostInit+0x5c>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_TIM_MspPostInit+0x5c>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_TIM_MspPostInit+0x5c>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_TIM_MspPostInit+0x60>)
 80018b8:	f000 fb90 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800

080018d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <HAL_UART_MspInit+0x98>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d137      	bne.n	8001960 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_UART_MspInit+0x9c>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_UART_MspInit+0x9c>)
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fa:	61d3      	str	r3, [r2, #28]
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_UART_MspInit+0x9c>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_UART_MspInit+0x9c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <HAL_UART_MspInit+0x9c>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_UART_MspInit+0x9c>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001920:	2304      	movs	r3, #4
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	480f      	ldr	r0, [pc, #60]	; (8001970 <HAL_UART_MspInit+0xa0>)
 8001934:	f000 fb52 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001938:	2308      	movs	r3, #8
 800193a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	4809      	ldr	r0, [pc, #36]	; (8001970 <HAL_UART_MspInit+0xa0>)
 800194c:	f000 fb46 	bl	8001fdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2026      	movs	r0, #38	; 0x26
 8001956:	f000 fa58 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800195a:	2026      	movs	r0, #38	; 0x26
 800195c:	f000 fa71 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004400 	.word	0x40004400
 800196c:	40021000 	.word	0x40021000
 8001970:	40010800 	.word	0x40010800

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f933 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM2_IRQHandler+0x10>)
 80019ca:	f001 fac9 	bl	8002f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000170 	.word	0x20000170

080019d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM3_IRQHandler+0x10>)
 80019de:	f001 fabf 	bl	8002f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000128 	.word	0x20000128

080019ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <USART2_IRQHandler+0x10>)
 80019f2:	f002 f953 	bl	8003c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001b8 	.word	0x200001b8

08001a00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00a      	b.n	8001a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a12:	f3af 8000 	nop.w
 8001a16:	4601      	mov	r1, r0
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf0      	blt.n	8001a12 <_read+0x12>
	}

return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e009      	b.n	8001a60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fbf7 	bl	8001248 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf1      	blt.n	8001a4c <_write+0x12>
	}
	return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
	return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f002 fe1a 	bl	800473c <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20005000 	.word	0x20005000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	2000011c 	.word	0x2000011c
 8001b3c:	20000218 	.word	0x20000218

08001b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff fff8 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b52:	490c      	ldr	r1, [pc, #48]	; (8001b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b68:	4c09      	ldr	r4, [pc, #36]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f002 fde7 	bl	8004748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7a:	f7ff fb77 	bl	800126c <main>
  bx lr
 8001b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001b88:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 8001b8c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001b90:	20000214 	.word	0x20000214

08001b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC1_2_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_Init+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_Init+0x28>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f923 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fde8 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f93b 	bl	8001e5e <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f903 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000040 	.word	0x20000040
 8001c1c:	20000048 	.word	0x20000048
 8001c20:	20000044 	.word	0x20000044

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x20>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_IncTick+0x20>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000048 	.word	0x20000048
 8001c44:	20000200 	.word	0x20000200

08001c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <HAL_GetTick+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000200 	.word	0x20000200

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <__NVIC_EnableIRQ+0x34>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff90 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff2d 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff42 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff90 	bl	8001d4c <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5f 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff35 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d008      	beq.n	8001ea0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e020      	b.n	8001ee2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020e 	bic.w	r2, r2, #14
 8001eae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d005      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2204      	movs	r2, #4
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e051      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 020e 	bic.w	r2, r2, #14
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_DMA_Abort_IT+0xd4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d029      	beq.n	8001f8e <HAL_DMA_Abort_IT+0xa2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <HAL_DMA_Abort_IT+0xd8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x9e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_DMA_Abort_IT+0xdc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01a      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x98>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_DMA_Abort_IT+0xe0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d012      	beq.n	8001f7e <HAL_DMA_Abort_IT+0x92>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_DMA_Abort_IT+0xe4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00a      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x8c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_DMA_Abort_IT+0xe8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d102      	bne.n	8001f72 <HAL_DMA_Abort_IT+0x86>
 8001f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f70:	e00e      	b.n	8001f90 <HAL_DMA_Abort_IT+0xa4>
 8001f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f76:	e00b      	b.n	8001f90 <HAL_DMA_Abort_IT+0xa4>
 8001f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7c:	e008      	b.n	8001f90 <HAL_DMA_Abort_IT+0xa4>
 8001f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f82:	e005      	b.n	8001f90 <HAL_DMA_Abort_IT+0xa4>
 8001f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f88:	e002      	b.n	8001f90 <HAL_DMA_Abort_IT+0xa4>
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_Abort_IT+0xa4>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_DMA_Abort_IT+0xec>)
 8001f92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
    } 
  }
  return status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020008 	.word	0x40020008
 8001fc4:	4002001c 	.word	0x4002001c
 8001fc8:	40020030 	.word	0x40020030
 8001fcc:	40020044 	.word	0x40020044
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	4002006c 	.word	0x4002006c
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e169      	b.n	80022c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8158 	bne.w	80022be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a9a      	ldr	r2, [pc, #616]	; (800227c <HAL_GPIO_Init+0x2a0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d05e      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002018:	4a98      	ldr	r2, [pc, #608]	; (800227c <HAL_GPIO_Init+0x2a0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d875      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800201e:	4a98      	ldr	r2, [pc, #608]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d058      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002024:	4a96      	ldr	r2, [pc, #600]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d86f      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800202a:	4a96      	ldr	r2, [pc, #600]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d052      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002030:	4a94      	ldr	r2, [pc, #592]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d869      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002036:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d04c      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 800203c:	4a92      	ldr	r2, [pc, #584]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d863      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002042:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_GPIO_Init+0x2b0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d046      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002048:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_GPIO_Init+0x2b0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d85d      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800204e:	2b12      	cmp	r3, #18
 8002050:	d82a      	bhi.n	80020a8 <HAL_GPIO_Init+0xcc>
 8002052:	2b12      	cmp	r3, #18
 8002054:	d859      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_GPIO_Init+0x80>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	080020d7 	.word	0x080020d7
 8002060:	080020b1 	.word	0x080020b1
 8002064:	080020c3 	.word	0x080020c3
 8002068:	08002105 	.word	0x08002105
 800206c:	0800210b 	.word	0x0800210b
 8002070:	0800210b 	.word	0x0800210b
 8002074:	0800210b 	.word	0x0800210b
 8002078:	0800210b 	.word	0x0800210b
 800207c:	0800210b 	.word	0x0800210b
 8002080:	0800210b 	.word	0x0800210b
 8002084:	0800210b 	.word	0x0800210b
 8002088:	0800210b 	.word	0x0800210b
 800208c:	0800210b 	.word	0x0800210b
 8002090:	0800210b 	.word	0x0800210b
 8002094:	0800210b 	.word	0x0800210b
 8002098:	0800210b 	.word	0x0800210b
 800209c:	0800210b 	.word	0x0800210b
 80020a0:	080020b9 	.word	0x080020b9
 80020a4:	080020cd 	.word	0x080020cd
 80020a8:	4a79      	ldr	r2, [pc, #484]	; (8002290 <HAL_GPIO_Init+0x2b4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ae:	e02c      	b.n	800210a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e029      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	3304      	adds	r3, #4
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e024      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	3308      	adds	r3, #8
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e01f      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	330c      	adds	r3, #12
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e01a      	b.n	800210c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020de:	2304      	movs	r3, #4
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e013      	b.n	800210c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	611a      	str	r2, [r3, #16]
          break;
 80020f6:	e009      	b.n	800210c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f8:	2308      	movs	r3, #8
 80020fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	615a      	str	r2, [r3, #20]
          break;
 8002102:	e003      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x130>
          break;
 800210a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d801      	bhi.n	8002116 <HAL_GPIO_Init+0x13a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	e001      	b.n	800211a <HAL_GPIO_Init+0x13e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d802      	bhi.n	8002128 <HAL_GPIO_Init+0x14c>
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x152>
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3b08      	subs	r3, #8
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	210f      	movs	r1, #15
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80b1 	beq.w	80022be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_GPIO_Init+0x2c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1ec>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_GPIO_Init+0x2c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1e8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_GPIO_Init+0x2c8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_GPIO_Init+0x2cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1e0>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021bc:	2304      	movs	r3, #4
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c8:	2300      	movs	r3, #0
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021da:	492f      	ldr	r1, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	492c      	ldr	r1, [pc, #176]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4928      	ldr	r1, [pc, #160]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	491e      	ldr	r1, [pc, #120]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002234:	4013      	ands	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4914      	ldr	r1, [pc, #80]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d021      	beq.n	80022b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e021      	b.n	80022be <HAL_GPIO_Init+0x2e2>
 800227a:	bf00      	nop
 800227c:	10320000 	.word	0x10320000
 8002280:	10310000 	.word	0x10310000
 8002284:	10220000 	.word	0x10220000
 8002288:	10210000 	.word	0x10210000
 800228c:	10120000 	.word	0x10120000
 8002290:	10110000 	.word	0x10110000
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40011400 	.word	0x40011400
 80022ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f ae8e 	bne.w	8001ff0 <HAL_GPIO_Init+0x14>
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	372c      	adds	r7, #44	; 0x2c
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e001      	b.n	8002306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	807b      	strh	r3, [r7, #2]
 800231e:	4613      	mov	r3, r2
 8002320:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002322:	787b      	ldrb	r3, [r7, #1]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800232e:	e003      	b.n	8002338 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	041a      	lsls	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	611a      	str	r2, [r3, #16]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e26c      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8087 	beq.w	8002472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002364:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00c      	beq.n	800238a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002370:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d112      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5e>
 800237c:	4b8c      	ldr	r3, [pc, #560]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d10b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d06c      	beq.n	8002470 <HAL_RCC_OscConfig+0x12c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d168      	bne.n	8002470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e246      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x76>
 80023ac:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a7f      	ldr	r2, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e02e      	b.n	8002418 <HAL_RCC_OscConfig+0xd4>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x98>
 80023c2:	4b7b      	ldr	r3, [pc, #492]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7a      	ldr	r2, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a77      	ldr	r2, [pc, #476]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xd4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0xbc>
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a71      	ldr	r2, [pc, #452]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xd4>
 8002400:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a67      	ldr	r2, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fc12 	bl	8001c48 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fc0e 	bl	8001c48 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1fa      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xe4>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fbfe 	bl	8001c48 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fbfa 	bl	8001c48 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1e6      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x10c>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x18c>
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x176>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1ba      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4939      	ldr	r1, [pc, #228]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCC_OscConfig+0x270>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7ff fbb3 	bl	8001c48 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7ff fbaf 	bl	8001c48 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e19b      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4927      	ldr	r1, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x270>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fb92 	bl	8001c48 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002528:	f7ff fb8e 	bl	8001c48 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e17a      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d03a      	beq.n	80025c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d019      	beq.n	800258e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_RCC_OscConfig+0x274>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff fb72 	bl	8001c48 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff fb6e 	bl	8001c48 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e15a      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 facc 	bl	8002b24 <RCC_Delay>
 800258c:	e01c      	b.n	80025c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_OscConfig+0x274>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7ff fb58 	bl	8001c48 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259a:	e00f      	b.n	80025bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259c:	f7ff fb54 	bl	8001c48 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d908      	bls.n	80025bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e140      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	42420000 	.word	0x42420000
 80025b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e9      	bne.n	800259c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80a6 	beq.w	8002722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b97      	ldr	r3, [pc, #604]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b94      	ldr	r3, [pc, #592]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a93      	ldr	r2, [pc, #588]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b91      	ldr	r3, [pc, #580]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fe:	2301      	movs	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	4b8e      	ldr	r3, [pc, #568]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260e:	4b8b      	ldr	r3, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a8a      	ldr	r2, [pc, #552]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261a:	f7ff fb15 	bl	8001c48 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002622:	f7ff fb11 	bl	8001c48 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	; 0x64
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0fd      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x312>
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a7a      	ldr	r2, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	e02d      	b.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x334>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a72      	ldr	r2, [pc, #456]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	e01c      	b.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d10c      	bne.n	800269a <HAL_RCC_OscConfig+0x356>
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	e00b      	b.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a66      	ldr	r2, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d015      	beq.n	80026e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fac5 	bl	8001c48 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7ff fac1 	bl	8001c48 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0ab      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ee      	beq.n	80026c2 <HAL_RCC_OscConfig+0x37e>
 80026e4:	e014      	b.n	8002710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e6:	f7ff faaf 	bl	8001c48 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7ff faab 	bl	8001c48 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e095      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ee      	bne.n	80026ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002716:	4b48      	ldr	r3, [pc, #288]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a47      	ldr	r2, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8081 	beq.w	800282e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272c:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	d061      	beq.n	80027fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d146      	bne.n	80027ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_OscConfig+0x4fc>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7ff fa7f 	bl	8001c48 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7ff fa7b 	bl	8001c48 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e067      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d108      	bne.n	8002788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	492d      	ldr	r1, [pc, #180]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a19      	ldr	r1, [r3, #32]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	430b      	orrs	r3, r1
 800279a:	4927      	ldr	r1, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x4fc>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fa4f 	bl	8001c48 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7ff fa4b 	bl	8001c48 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e037      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x46a>
 80027cc:	e02f      	b.n	800282e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_RCC_OscConfig+0x4fc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff fa38 	bl	8001c48 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff fa34 	bl	8001c48 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e020      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x498>
 80027fa:	e018      	b.n	800282e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e013      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	42420060 	.word	0x42420060

08002844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d0      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4965      	ldr	r1, [pc, #404]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d040      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e073      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4936      	ldr	r1, [pc, #216]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7ff f988 	bl	8001c48 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7ff f984 	bl	8001c48 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e053      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d210      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4922      	ldr	r1, [pc, #136]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	; (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1cc>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f8e6 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08005910 	.word	0x08005910
 8002a10:	20000040 	.word	0x20000040
 8002a14:	20000044 	.word	0x20000044

08002a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x30>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x36>
 8002a46:	e027      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0c5b      	lsrs	r3, r3, #17
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7a:	fb02 f203 	mul.w	r2, r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	693b      	ldr	r3, [r7, #16]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	08005928 	.word	0x08005928
 8002ab8:	08005938 	.word	0x08005938
 8002abc:	003d0900 	.word	0x003d0900

08002ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac4:	4b02      	ldr	r3, [pc, #8]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000040 	.word	0x20000040

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff2 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08005920 	.word	0x08005920

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b00:	f7ff ffde 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	0adb      	lsrs	r3, r3, #11
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08005920 	.word	0x08005920

08002b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <RCC_Delay+0x34>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <RCC_Delay+0x38>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a5b      	lsrs	r3, r3, #9
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b40:	bf00      	nop
  }
  while (Delay --);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	60fa      	str	r2, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f9      	bne.n	8002b40 <RCC_Delay+0x1c>
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	20000040 	.word	0x20000040
 8002b5c:	10624dd3 	.word	0x10624dd3

08002b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e041      	b.n	8002bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe fe30 	bl	80017ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fc94 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d001      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e03a      	b.n	8002c8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_Base_Start_IT+0x98>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00e      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x58>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d009      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x58>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x58>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d111      	bne.n	8002c7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d010      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7a:	e007      	b.n	8002c8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e041      	b.n	8002d3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f839 	bl	8002d42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	f000 fbf2 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x24>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e022      	b.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d109      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x3e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e015      	b.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d109      	bne.n	8002dac <HAL_TIM_PWM_Start+0x58>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e05e      	b.n	8002e84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0x82>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	e013      	b.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xa2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df4:	e003      	b.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2201      	movs	r2, #1
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fde0 	bl	80039cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_TIM_PWM_Start+0x138>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_TIM_PWM_Start+0x138>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_TIM_PWM_Start+0xfa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d009      	beq.n	8002e4e <HAL_TIM_PWM_Start+0xfa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_TIM_PWM_Start+0x13c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_PWM_Start+0xfa>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <HAL_TIM_PWM_Start+0x140>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d111      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d010      	beq.n	8002e82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e70:	e007      	b.n	8002e82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800

08002e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd8e 	bl	80039cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_TIM_PWM_Stop+0xc4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d117      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x52>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x52>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0x82>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	f240 4344 	movw	r3, #1092	; 0x444
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0x82>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Stop+0x92>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f28:	e013      	b.n	8002f52 <HAL_TIM_PWM_Stop+0xba>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Stop+0xa2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f38:	e00b      	b.n	8002f52 <HAL_TIM_PWM_Stop+0xba>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0xb2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f48:	e003      	b.n	8002f52 <HAL_TIM_PWM_Stop+0xba>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40012c00 	.word	0x40012c00

08002f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0202 	mvn.w	r2, #2
 8002f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa76 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa69 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa78 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0204 	mvn.w	r2, #4
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa4c 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa3f 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fa4e 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b08      	cmp	r3, #8
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0208 	mvn.w	r2, #8
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa22 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa15 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa24 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b10      	cmp	r3, #16
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9f8 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9eb 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9fa 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0201 	mvn.w	r2, #1
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe fa84 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fce9 	bl	8003ae2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9be 	bl	80034b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b20      	cmp	r3, #32
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b20      	cmp	r3, #32
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0220 	mvn.w	r2, #32
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fcb4 	bl	8003ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800318a:	2302      	movs	r3, #2
 800318c:	e0ae      	b.n	80032ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	f200 809f 	bhi.w	80032dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080032dd 	.word	0x080032dd
 80031ac:	080032dd 	.word	0x080032dd
 80031b0:	080032dd 	.word	0x080032dd
 80031b4:	08003219 	.word	0x08003219
 80031b8:	080032dd 	.word	0x080032dd
 80031bc:	080032dd 	.word	0x080032dd
 80031c0:	080032dd 	.word	0x080032dd
 80031c4:	0800325b 	.word	0x0800325b
 80031c8:	080032dd 	.word	0x080032dd
 80031cc:	080032dd 	.word	0x080032dd
 80031d0:	080032dd 	.word	0x080032dd
 80031d4:	0800329b 	.word	0x0800329b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f9d6 	bl	8003590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0208 	orr.w	r2, r2, #8
 80031f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0204 	bic.w	r2, r2, #4
 8003202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6999      	ldr	r1, [r3, #24]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	619a      	str	r2, [r3, #24]
      break;
 8003216:	e064      	b.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fa1c 	bl	800365c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6999      	ldr	r1, [r3, #24]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	021a      	lsls	r2, r3, #8
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	619a      	str	r2, [r3, #24]
      break;
 8003258:	e043      	b.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fa65 	bl	8003730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0208 	orr.w	r2, r2, #8
 8003274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0204 	bic.w	r2, r2, #4
 8003284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	61da      	str	r2, [r3, #28]
      break;
 8003298:	e023      	b.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 faaf 	bl	8003804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69d9      	ldr	r1, [r3, #28]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	021a      	lsls	r2, r3, #8
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	61da      	str	r2, [r3, #28]
      break;
 80032da:	e002      	b.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
      break;
 80032e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_TIM_ConfigClockSource+0x1c>
 800330c:	2302      	movs	r3, #2
 800330e:	e0b4      	b.n	800347a <HAL_TIM_ConfigClockSource+0x186>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800332e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003348:	d03e      	beq.n	80033c8 <HAL_TIM_ConfigClockSource+0xd4>
 800334a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334e:	f200 8087 	bhi.w	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	f000 8086 	beq.w	8003466 <HAL_TIM_ConfigClockSource+0x172>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d87f      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b70      	cmp	r3, #112	; 0x70
 8003362:	d01a      	beq.n	800339a <HAL_TIM_ConfigClockSource+0xa6>
 8003364:	2b70      	cmp	r3, #112	; 0x70
 8003366:	d87b      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b60      	cmp	r3, #96	; 0x60
 800336a:	d050      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x11a>
 800336c:	2b60      	cmp	r3, #96	; 0x60
 800336e:	d877      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b50      	cmp	r3, #80	; 0x50
 8003372:	d03c      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0xfa>
 8003374:	2b50      	cmp	r3, #80	; 0x50
 8003376:	d873      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d058      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x13a>
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d86f      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b30      	cmp	r3, #48	; 0x30
 8003382:	d064      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d86b      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b20      	cmp	r3, #32
 800338a:	d060      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d867      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05c      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	2b10      	cmp	r3, #16
 8003396:	d05a      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 8003398:	e062      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6899      	ldr	r1, [r3, #8]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f000 faf0 	bl	800398e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	609a      	str	r2, [r3, #8]
      break;
 80033c6:	e04f      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f000 fad9 	bl	800398e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ea:	609a      	str	r2, [r3, #8]
      break;
 80033ec:	e03c      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 fa50 	bl	80038a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2150      	movs	r1, #80	; 0x50
 8003406:	4618      	mov	r0, r3
 8003408:	f000 faa7 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800340c:	e02c      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 fa6e 	bl	80038fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2160      	movs	r1, #96	; 0x60
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fa97 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800342c:	e01c      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	461a      	mov	r2, r3
 800343c:	f000 fa30 	bl	80038a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa87 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800344c:	e00c      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f000 fa7e 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800345e:	e003      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      break;
 8003464:	e000      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
	...

080034cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a29      	ldr	r2, [pc, #164]	; (8003584 <TIM_Base_SetConfig+0xb8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00b      	beq.n	80034fc <TIM_Base_SetConfig+0x30>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d007      	beq.n	80034fc <TIM_Base_SetConfig+0x30>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <TIM_Base_SetConfig+0xbc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_Base_SetConfig+0x30>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a25      	ldr	r2, [pc, #148]	; (800358c <TIM_Base_SetConfig+0xc0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d108      	bne.n	800350e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <TIM_Base_SetConfig+0xb8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0x62>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <TIM_Base_SetConfig+0xbc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a18      	ldr	r2, [pc, #96]	; (800358c <TIM_Base_SetConfig+0xc0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <TIM_Base_SetConfig+0xb8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d103      	bne.n	8003574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	615a      	str	r2, [r3, #20]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800

08003590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 0201 	bic.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 0302 	bic.w	r3, r3, #2
 80035d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <TIM_OC1_SetConfig+0xc8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d10c      	bne.n	8003606 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0308 	bic.w	r3, r3, #8
 80035f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <TIM_OC1_SetConfig+0xc8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d111      	bne.n	8003632 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800361c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40012c00 	.word	0x40012c00

0800365c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f023 0210 	bic.w	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1d      	ldr	r2, [pc, #116]	; (800372c <TIM_OC2_SetConfig+0xd0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d10d      	bne.n	80036d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <TIM_OC2_SetConfig+0xd0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d113      	bne.n	8003708 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00

08003730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <TIM_OC3_SetConfig+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <TIM_OC3_SetConfig+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d113      	bne.n	80037da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00

08003804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	031b      	lsls	r3, r3, #12
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0f      	ldr	r2, [pc, #60]	; (800389c <TIM_OC4_SetConfig+0x98>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d109      	bne.n	8003878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	019b      	lsls	r3, r3, #6
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	40012c00 	.word	0x40012c00

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0201 	bic.w	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 030a 	bic.w	r3, r3, #10
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0210 	bic.w	r2, r3, #16
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003938:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e046      	b.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d009      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800

08003ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e042      	b.n	8003b8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fed8 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd71 	bl	8004620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d16d      	bne.n	8003c90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_UART_Transmit+0x2c>
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e066      	b.n	8003c92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2221      	movs	r2, #33	; 0x21
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd2:	f7fe f839 	bl	8001c48 <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bec:	d108      	bne.n	8003c00 <HAL_UART_Transmit+0x6c>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	e003      	b.n	8003c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c08:	e02a      	b.n	8003c60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 faf9 	bl	800420c <UART_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e036      	b.n	8003c92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e007      	b.n	8003c52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1cf      	bne.n	8003c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fac9 	bl	800420c <UART_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e006      	b.n	8003c92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b0ba      	sub	sp, #232	; 0xe8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_UART_IRQHandler+0x66>
 8003cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fbd1 	bl	80044a2 <UART_Receive_IT>
      return;
 8003d00:	e25b      	b.n	80041ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80de 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x22c>
 8003d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80d1 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_UART_IRQHandler+0xae>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_UART_IRQHandler+0xd2>
 8003d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_UART_IRQHandler+0xf6>
 8003d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d011      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x126>
 8003d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f043 0208 	orr.w	r2, r3, #8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 81f2 	beq.w	80041b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_UART_IRQHandler+0x14e>
 8003dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fb5c 	bl	80044a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_UART_IRQHandler+0x17a>
 8003e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d04f      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa66 	bl	80042e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d041      	beq.n	8003eae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1d9      	bne.n	8003e2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	4a7e      	ldr	r2, [pc, #504]	; (800407c <HAL_UART_IRQHandler+0x3e0>)
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe f82e 	bl	8001eec <HAL_DMA_Abort_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e00e      	b.n	8003ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f99c 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e00a      	b.n	8003ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f998 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e006      	b.n	8003ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f994 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ec2:	e175      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	bf00      	nop
    return;
 8003ec6:	e173      	b.n	80041b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 814f 	bne.w	8004170 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8148 	beq.w	8004170 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8141 	beq.w	8004170 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80b6 	beq.w	8004080 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8145 	beq.w	80041b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f32:	429a      	cmp	r2, r3
 8003f34:	f080 813e 	bcs.w	80041b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f000 8088 	beq.w	800405c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1d9      	bne.n	8003f4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e1      	bne.n	8003f98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ff8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ffe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e3      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800403e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004040:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e3      	bne.n	800401a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd ff0d 	bl	8001e76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800406a:	b29b      	uxth	r3, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8bf 	bl	80041f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004078:	e09c      	b.n	80041b4 <HAL_UART_IRQHandler+0x518>
 800407a:	bf00      	nop
 800407c:	080043ad 	.word	0x080043ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004088:	b29b      	uxth	r3, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 808e 	beq.w	80041b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800409c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8089 	beq.w	80041b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040ca:	647a      	str	r2, [r7, #68]	; 0x44
 80040cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e3      	bne.n	80040a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	623b      	str	r3, [r7, #32]
   return(result);
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004102:	633a      	str	r2, [r7, #48]	; 0x30
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e3      	bne.n	80040de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	60fb      	str	r3, [r7, #12]
   return(result);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0310 	bic.w	r3, r3, #16
 800413a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004148:	61fa      	str	r2, [r7, #28]
 800414a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	69b9      	ldr	r1, [r7, #24]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	617b      	str	r3, [r7, #20]
   return(result);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e3      	bne.n	8004124 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f844 	bl	80041f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800416e:	e023      	b.n	80041b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_UART_IRQHandler+0x4f4>
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f923 	bl	80043d4 <UART_Transmit_IT>
    return;
 800418e:	e014      	b.n	80041ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00e      	beq.n	80041ba <HAL_UART_IRQHandler+0x51e>
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f962 	bl	8004472 <UART_EndTransmit_IT>
    return;
 80041ae:	e004      	b.n	80041ba <HAL_UART_IRQHandler+0x51e>
    return;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_UART_IRQHandler+0x51e>
      return;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_UART_IRQHandler+0x51e>
      return;
 80041b8:	bf00      	nop
  }
}
 80041ba:	37e8      	adds	r7, #232	; 0xe8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b090      	sub	sp, #64	; 0x40
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421c:	e050      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d04c      	beq.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0x30>
 800422c:	f7fd fd0c 	bl	8001c48 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004238:	429a      	cmp	r2, r3
 800423a:	d241      	bcs.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800425c:	637a      	str	r2, [r7, #52]	; 0x34
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	613b      	str	r3, [r7, #16]
   return(result);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004290:	623a      	str	r2, [r7, #32]
 8004292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	61bb      	str	r3, [r7, #24]
   return(result);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e00f      	b.n	80042e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d09f      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3740      	adds	r7, #64	; 0x40
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b095      	sub	sp, #84	; 0x54
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004310:	643a      	str	r2, [r7, #64]	; 0x40
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	61fb      	str	r3, [r7, #28]
   return(result);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004344:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	2b01      	cmp	r3, #1
 800435e:	d119      	bne.n	8004394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 0310 	bic.w	r3, r3, #16
 8004376:	647b      	str	r3, [r7, #68]	; 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004380:	61ba      	str	r2, [r7, #24]
 8004382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	613b      	str	r3, [r7, #16]
   return(result);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043a2:	bf00      	nop
 80043a4:	3754      	adds	r7, #84	; 0x54
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff ff0c 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b21      	cmp	r3, #33	; 0x21
 80043e6:	d13e      	bne.n	8004466 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d114      	bne.n	800441c <UART_Transmit_IT+0x48>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d110      	bne.n	800441c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]
 800441a:	e008      	b.n	800442e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6211      	str	r1, [r2, #32]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4619      	mov	r1, r3
 800443c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004450:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004460:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fe94 	bl	80041c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b08c      	sub	sp, #48	; 0x30
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b22      	cmp	r3, #34	; 0x22
 80044b4:	f040 80ae 	bne.w	8004614 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c0:	d117      	bne.n	80044f2 <UART_Receive_IT+0x50>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
 80044f0:	e026      	b.n	8004540 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d007      	beq.n	8004516 <UART_Receive_IT+0x74>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <UART_Receive_IT+0x82>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e008      	b.n	8004536 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004530:	b2da      	uxtb	r2, r3
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29b      	uxth	r3, r3
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4619      	mov	r1, r3
 800454e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004550:	2b00      	cmp	r3, #0
 8004552:	d15d      	bne.n	8004610 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0220 	bic.w	r2, r2, #32
 8004562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	2b01      	cmp	r3, #1
 8004598:	d135      	bne.n	8004606 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	613b      	str	r3, [r7, #16]
   return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	623a      	str	r2, [r7, #32]
 80045c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	6a3a      	ldr	r2, [r7, #32]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d10a      	bne.n	80045f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fdf9 	bl	80041f6 <HAL_UARTEx_RxEventCallback>
 8004604:	e002      	b.n	800460c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fde3 	bl	80041d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e002      	b.n	8004616 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3730      	adds	r7, #48	; 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800465a:	f023 030c 	bic.w	r3, r3, #12
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	430b      	orrs	r3, r1
 8004666:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <UART_SetConfig+0x114>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fe fa38 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	e002      	b.n	8004696 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fe fa20 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8004694:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009a      	lsls	r2, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <UART_SetConfig+0x118>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	0119      	lsls	r1, r3, #4
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009a      	lsls	r2, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <UART_SetConfig+0x118>)
 80046ce:	fba3 0302 	umull	r0, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2064      	movs	r0, #100	; 0x64
 80046d6:	fb00 f303 	mul.w	r3, r0, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	3332      	adds	r3, #50	; 0x32
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <UART_SetConfig+0x118>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ec:	4419      	add	r1, r3
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009a      	lsls	r2, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fbb2 f2f3 	udiv	r2, r2, r3
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <UART_SetConfig+0x118>)
 8004706:	fba3 0302 	umull	r0, r3, r3, r2
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2064      	movs	r0, #100	; 0x64
 800470e:	fb00 f303 	mul.w	r3, r0, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	3332      	adds	r3, #50	; 0x32
 8004718:	4a07      	ldr	r2, [pc, #28]	; (8004738 <UART_SetConfig+0x118>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	440a      	add	r2, r1
 800472a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40013800 	.word	0x40013800
 8004738:	51eb851f 	.word	0x51eb851f

0800473c <__errno>:
 800473c:	4b01      	ldr	r3, [pc, #4]	; (8004744 <__errno+0x8>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	2000004c 	.word	0x2000004c

08004748 <__libc_init_array>:
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	2600      	movs	r6, #0
 800474c:	4d0c      	ldr	r5, [pc, #48]	; (8004780 <__libc_init_array+0x38>)
 800474e:	4c0d      	ldr	r4, [pc, #52]	; (8004784 <__libc_init_array+0x3c>)
 8004750:	1b64      	subs	r4, r4, r5
 8004752:	10a4      	asrs	r4, r4, #2
 8004754:	42a6      	cmp	r6, r4
 8004756:	d109      	bne.n	800476c <__libc_init_array+0x24>
 8004758:	f000 fff8 	bl	800574c <_init>
 800475c:	2600      	movs	r6, #0
 800475e:	4d0a      	ldr	r5, [pc, #40]	; (8004788 <__libc_init_array+0x40>)
 8004760:	4c0a      	ldr	r4, [pc, #40]	; (800478c <__libc_init_array+0x44>)
 8004762:	1b64      	subs	r4, r4, r5
 8004764:	10a4      	asrs	r4, r4, #2
 8004766:	42a6      	cmp	r6, r4
 8004768:	d105      	bne.n	8004776 <__libc_init_array+0x2e>
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004770:	4798      	blx	r3
 8004772:	3601      	adds	r6, #1
 8004774:	e7ee      	b.n	8004754 <__libc_init_array+0xc>
 8004776:	f855 3b04 	ldr.w	r3, [r5], #4
 800477a:	4798      	blx	r3
 800477c:	3601      	adds	r6, #1
 800477e:	e7f2      	b.n	8004766 <__libc_init_array+0x1e>
 8004780:	080059d4 	.word	0x080059d4
 8004784:	080059d4 	.word	0x080059d4
 8004788:	080059d4 	.word	0x080059d4
 800478c:	080059d8 	.word	0x080059d8

08004790 <memset>:
 8004790:	4603      	mov	r3, r0
 8004792:	4402      	add	r2, r0
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	f803 1b01 	strb.w	r1, [r3], #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <iprintf>:
 80047a0:	b40f      	push	{r0, r1, r2, r3}
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <iprintf+0x2c>)
 80047a4:	b513      	push	{r0, r1, r4, lr}
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	b124      	cbz	r4, 80047b4 <iprintf+0x14>
 80047aa:	69a3      	ldr	r3, [r4, #24]
 80047ac:	b913      	cbnz	r3, 80047b4 <iprintf+0x14>
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 fa5e 	bl	8004c70 <__sinit>
 80047b4:	ab05      	add	r3, sp, #20
 80047b6:	4620      	mov	r0, r4
 80047b8:	9a04      	ldr	r2, [sp, #16]
 80047ba:	68a1      	ldr	r1, [r4, #8]
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	f000 fc29 	bl	8005014 <_vfiprintf_r>
 80047c2:	b002      	add	sp, #8
 80047c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c8:	b004      	add	sp, #16
 80047ca:	4770      	bx	lr
 80047cc:	2000004c 	.word	0x2000004c

080047d0 <_puts_r>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	460e      	mov	r6, r1
 80047d4:	4605      	mov	r5, r0
 80047d6:	b118      	cbz	r0, 80047e0 <_puts_r+0x10>
 80047d8:	6983      	ldr	r3, [r0, #24]
 80047da:	b90b      	cbnz	r3, 80047e0 <_puts_r+0x10>
 80047dc:	f000 fa48 	bl	8004c70 <__sinit>
 80047e0:	69ab      	ldr	r3, [r5, #24]
 80047e2:	68ac      	ldr	r4, [r5, #8]
 80047e4:	b913      	cbnz	r3, 80047ec <_puts_r+0x1c>
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fa42 	bl	8004c70 <__sinit>
 80047ec:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <_puts_r+0xd0>)
 80047ee:	429c      	cmp	r4, r3
 80047f0:	d120      	bne.n	8004834 <_puts_r+0x64>
 80047f2:	686c      	ldr	r4, [r5, #4]
 80047f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047f6:	07db      	lsls	r3, r3, #31
 80047f8:	d405      	bmi.n	8004806 <_puts_r+0x36>
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	0598      	lsls	r0, r3, #22
 80047fe:	d402      	bmi.n	8004806 <_puts_r+0x36>
 8004800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004802:	f000 fad3 	bl	8004dac <__retarget_lock_acquire_recursive>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	0719      	lsls	r1, r3, #28
 800480a:	d51d      	bpl.n	8004848 <_puts_r+0x78>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	b1db      	cbz	r3, 8004848 <_puts_r+0x78>
 8004810:	3e01      	subs	r6, #1
 8004812:	68a3      	ldr	r3, [r4, #8]
 8004814:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004818:	3b01      	subs	r3, #1
 800481a:	60a3      	str	r3, [r4, #8]
 800481c:	bb39      	cbnz	r1, 800486e <_puts_r+0x9e>
 800481e:	2b00      	cmp	r3, #0
 8004820:	da38      	bge.n	8004894 <_puts_r+0xc4>
 8004822:	4622      	mov	r2, r4
 8004824:	210a      	movs	r1, #10
 8004826:	4628      	mov	r0, r5
 8004828:	f000 f848 	bl	80048bc <__swbuf_r>
 800482c:	3001      	adds	r0, #1
 800482e:	d011      	beq.n	8004854 <_puts_r+0x84>
 8004830:	250a      	movs	r5, #10
 8004832:	e011      	b.n	8004858 <_puts_r+0x88>
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <_puts_r+0xd4>)
 8004836:	429c      	cmp	r4, r3
 8004838:	d101      	bne.n	800483e <_puts_r+0x6e>
 800483a:	68ac      	ldr	r4, [r5, #8]
 800483c:	e7da      	b.n	80047f4 <_puts_r+0x24>
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <_puts_r+0xd8>)
 8004840:	429c      	cmp	r4, r3
 8004842:	bf08      	it	eq
 8004844:	68ec      	ldreq	r4, [r5, #12]
 8004846:	e7d5      	b.n	80047f4 <_puts_r+0x24>
 8004848:	4621      	mov	r1, r4
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f888 	bl	8004960 <__swsetup_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	d0dd      	beq.n	8004810 <_puts_r+0x40>
 8004854:	f04f 35ff 	mov.w	r5, #4294967295
 8004858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800485a:	07da      	lsls	r2, r3, #31
 800485c:	d405      	bmi.n	800486a <_puts_r+0x9a>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	059b      	lsls	r3, r3, #22
 8004862:	d402      	bmi.n	800486a <_puts_r+0x9a>
 8004864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004866:	f000 faa2 	bl	8004dae <__retarget_lock_release_recursive>
 800486a:	4628      	mov	r0, r5
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	2b00      	cmp	r3, #0
 8004870:	da04      	bge.n	800487c <_puts_r+0xac>
 8004872:	69a2      	ldr	r2, [r4, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	dc06      	bgt.n	8004886 <_puts_r+0xb6>
 8004878:	290a      	cmp	r1, #10
 800487a:	d004      	beq.n	8004886 <_puts_r+0xb6>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	7019      	strb	r1, [r3, #0]
 8004884:	e7c5      	b.n	8004812 <_puts_r+0x42>
 8004886:	4622      	mov	r2, r4
 8004888:	4628      	mov	r0, r5
 800488a:	f000 f817 	bl	80048bc <__swbuf_r>
 800488e:	3001      	adds	r0, #1
 8004890:	d1bf      	bne.n	8004812 <_puts_r+0x42>
 8004892:	e7df      	b.n	8004854 <_puts_r+0x84>
 8004894:	250a      	movs	r5, #10
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	6022      	str	r2, [r4, #0]
 800489c:	701d      	strb	r5, [r3, #0]
 800489e:	e7db      	b.n	8004858 <_puts_r+0x88>
 80048a0:	08005960 	.word	0x08005960
 80048a4:	08005980 	.word	0x08005980
 80048a8:	08005940 	.word	0x08005940

080048ac <puts>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <puts+0xc>)
 80048ae:	4601      	mov	r1, r0
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f7ff bf8d 	b.w	80047d0 <_puts_r>
 80048b6:	bf00      	nop
 80048b8:	2000004c 	.word	0x2000004c

080048bc <__swbuf_r>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	460e      	mov	r6, r1
 80048c0:	4614      	mov	r4, r2
 80048c2:	4605      	mov	r5, r0
 80048c4:	b118      	cbz	r0, 80048ce <__swbuf_r+0x12>
 80048c6:	6983      	ldr	r3, [r0, #24]
 80048c8:	b90b      	cbnz	r3, 80048ce <__swbuf_r+0x12>
 80048ca:	f000 f9d1 	bl	8004c70 <__sinit>
 80048ce:	4b21      	ldr	r3, [pc, #132]	; (8004954 <__swbuf_r+0x98>)
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d12b      	bne.n	800492c <__swbuf_r+0x70>
 80048d4:	686c      	ldr	r4, [r5, #4]
 80048d6:	69a3      	ldr	r3, [r4, #24]
 80048d8:	60a3      	str	r3, [r4, #8]
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	071a      	lsls	r2, r3, #28
 80048de:	d52f      	bpl.n	8004940 <__swbuf_r+0x84>
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	b36b      	cbz	r3, 8004940 <__swbuf_r+0x84>
 80048e4:	6923      	ldr	r3, [r4, #16]
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	b2f6      	uxtb	r6, r6
 80048ea:	1ac0      	subs	r0, r0, r3
 80048ec:	6963      	ldr	r3, [r4, #20]
 80048ee:	4637      	mov	r7, r6
 80048f0:	4283      	cmp	r3, r0
 80048f2:	dc04      	bgt.n	80048fe <__swbuf_r+0x42>
 80048f4:	4621      	mov	r1, r4
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 f926 	bl	8004b48 <_fflush_r>
 80048fc:	bb30      	cbnz	r0, 800494c <__swbuf_r+0x90>
 80048fe:	68a3      	ldr	r3, [r4, #8]
 8004900:	3001      	adds	r0, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	60a3      	str	r3, [r4, #8]
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	6022      	str	r2, [r4, #0]
 800490c:	701e      	strb	r6, [r3, #0]
 800490e:	6963      	ldr	r3, [r4, #20]
 8004910:	4283      	cmp	r3, r0
 8004912:	d004      	beq.n	800491e <__swbuf_r+0x62>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	07db      	lsls	r3, r3, #31
 8004918:	d506      	bpl.n	8004928 <__swbuf_r+0x6c>
 800491a:	2e0a      	cmp	r6, #10
 800491c:	d104      	bne.n	8004928 <__swbuf_r+0x6c>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 f911 	bl	8004b48 <_fflush_r>
 8004926:	b988      	cbnz	r0, 800494c <__swbuf_r+0x90>
 8004928:	4638      	mov	r0, r7
 800492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <__swbuf_r+0x9c>)
 800492e:	429c      	cmp	r4, r3
 8004930:	d101      	bne.n	8004936 <__swbuf_r+0x7a>
 8004932:	68ac      	ldr	r4, [r5, #8]
 8004934:	e7cf      	b.n	80048d6 <__swbuf_r+0x1a>
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <__swbuf_r+0xa0>)
 8004938:	429c      	cmp	r4, r3
 800493a:	bf08      	it	eq
 800493c:	68ec      	ldreq	r4, [r5, #12]
 800493e:	e7ca      	b.n	80048d6 <__swbuf_r+0x1a>
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	f000 f80c 	bl	8004960 <__swsetup_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	d0cb      	beq.n	80048e4 <__swbuf_r+0x28>
 800494c:	f04f 37ff 	mov.w	r7, #4294967295
 8004950:	e7ea      	b.n	8004928 <__swbuf_r+0x6c>
 8004952:	bf00      	nop
 8004954:	08005960 	.word	0x08005960
 8004958:	08005980 	.word	0x08005980
 800495c:	08005940 	.word	0x08005940

08004960 <__swsetup_r>:
 8004960:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <__swsetup_r+0xcc>)
 8004962:	b570      	push	{r4, r5, r6, lr}
 8004964:	681d      	ldr	r5, [r3, #0]
 8004966:	4606      	mov	r6, r0
 8004968:	460c      	mov	r4, r1
 800496a:	b125      	cbz	r5, 8004976 <__swsetup_r+0x16>
 800496c:	69ab      	ldr	r3, [r5, #24]
 800496e:	b913      	cbnz	r3, 8004976 <__swsetup_r+0x16>
 8004970:	4628      	mov	r0, r5
 8004972:	f000 f97d 	bl	8004c70 <__sinit>
 8004976:	4b2e      	ldr	r3, [pc, #184]	; (8004a30 <__swsetup_r+0xd0>)
 8004978:	429c      	cmp	r4, r3
 800497a:	d10f      	bne.n	800499c <__swsetup_r+0x3c>
 800497c:	686c      	ldr	r4, [r5, #4]
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004984:	0719      	lsls	r1, r3, #28
 8004986:	d42c      	bmi.n	80049e2 <__swsetup_r+0x82>
 8004988:	06dd      	lsls	r5, r3, #27
 800498a:	d411      	bmi.n	80049b0 <__swsetup_r+0x50>
 800498c:	2309      	movs	r3, #9
 800498e:	6033      	str	r3, [r6, #0]
 8004990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	e03e      	b.n	8004a1a <__swsetup_r+0xba>
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <__swsetup_r+0xd4>)
 800499e:	429c      	cmp	r4, r3
 80049a0:	d101      	bne.n	80049a6 <__swsetup_r+0x46>
 80049a2:	68ac      	ldr	r4, [r5, #8]
 80049a4:	e7eb      	b.n	800497e <__swsetup_r+0x1e>
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <__swsetup_r+0xd8>)
 80049a8:	429c      	cmp	r4, r3
 80049aa:	bf08      	it	eq
 80049ac:	68ec      	ldreq	r4, [r5, #12]
 80049ae:	e7e6      	b.n	800497e <__swsetup_r+0x1e>
 80049b0:	0758      	lsls	r0, r3, #29
 80049b2:	d512      	bpl.n	80049da <__swsetup_r+0x7a>
 80049b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049b6:	b141      	cbz	r1, 80049ca <__swsetup_r+0x6a>
 80049b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049bc:	4299      	cmp	r1, r3
 80049be:	d002      	beq.n	80049c6 <__swsetup_r+0x66>
 80049c0:	4630      	mov	r0, r6
 80049c2:	f000 fa59 	bl	8004e78 <_free_r>
 80049c6:	2300      	movs	r3, #0
 80049c8:	6363      	str	r3, [r4, #52]	; 0x34
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	2300      	movs	r3, #0
 80049d4:	6063      	str	r3, [r4, #4]
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	f043 0308 	orr.w	r3, r3, #8
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	b94b      	cbnz	r3, 80049fa <__swsetup_r+0x9a>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f0:	d003      	beq.n	80049fa <__swsetup_r+0x9a>
 80049f2:	4621      	mov	r1, r4
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 f9ff 	bl	8004df8 <__smakebuf_r>
 80049fa:	89a0      	ldrh	r0, [r4, #12]
 80049fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a00:	f010 0301 	ands.w	r3, r0, #1
 8004a04:	d00a      	beq.n	8004a1c <__swsetup_r+0xbc>
 8004a06:	2300      	movs	r3, #0
 8004a08:	60a3      	str	r3, [r4, #8]
 8004a0a:	6963      	ldr	r3, [r4, #20]
 8004a0c:	425b      	negs	r3, r3
 8004a0e:	61a3      	str	r3, [r4, #24]
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	b943      	cbnz	r3, 8004a26 <__swsetup_r+0xc6>
 8004a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a18:	d1ba      	bne.n	8004990 <__swsetup_r+0x30>
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	0781      	lsls	r1, r0, #30
 8004a1e:	bf58      	it	pl
 8004a20:	6963      	ldrpl	r3, [r4, #20]
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	e7f4      	b.n	8004a10 <__swsetup_r+0xb0>
 8004a26:	2000      	movs	r0, #0
 8004a28:	e7f7      	b.n	8004a1a <__swsetup_r+0xba>
 8004a2a:	bf00      	nop
 8004a2c:	2000004c 	.word	0x2000004c
 8004a30:	08005960 	.word	0x08005960
 8004a34:	08005980 	.word	0x08005980
 8004a38:	08005940 	.word	0x08005940

08004a3c <__sflush_r>:
 8004a3c:	898a      	ldrh	r2, [r1, #12]
 8004a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a42:	4605      	mov	r5, r0
 8004a44:	0710      	lsls	r0, r2, #28
 8004a46:	460c      	mov	r4, r1
 8004a48:	d458      	bmi.n	8004afc <__sflush_r+0xc0>
 8004a4a:	684b      	ldr	r3, [r1, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	dc05      	bgt.n	8004a5c <__sflush_r+0x20>
 8004a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	dc02      	bgt.n	8004a5c <__sflush_r+0x20>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	d0f9      	beq.n	8004a56 <__sflush_r+0x1a>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a68:	682f      	ldr	r7, [r5, #0]
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	d032      	beq.n	8004ad4 <__sflush_r+0x98>
 8004a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	075a      	lsls	r2, r3, #29
 8004a74:	d505      	bpl.n	8004a82 <__sflush_r+0x46>
 8004a76:	6863      	ldr	r3, [r4, #4]
 8004a78:	1ac0      	subs	r0, r0, r3
 8004a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a7c:	b10b      	cbz	r3, 8004a82 <__sflush_r+0x46>
 8004a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a80:	1ac0      	subs	r0, r0, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	4602      	mov	r2, r0
 8004a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a88:	4628      	mov	r0, r5
 8004a8a:	6a21      	ldr	r1, [r4, #32]
 8004a8c:	47b0      	blx	r6
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	d106      	bne.n	8004aa2 <__sflush_r+0x66>
 8004a94:	6829      	ldr	r1, [r5, #0]
 8004a96:	291d      	cmp	r1, #29
 8004a98:	d82c      	bhi.n	8004af4 <__sflush_r+0xb8>
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <__sflush_r+0x108>)
 8004a9c:	40ca      	lsrs	r2, r1
 8004a9e:	07d6      	lsls	r6, r2, #31
 8004aa0:	d528      	bpl.n	8004af4 <__sflush_r+0xb8>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	6062      	str	r2, [r4, #4]
 8004aa6:	6922      	ldr	r2, [r4, #16]
 8004aa8:	04d9      	lsls	r1, r3, #19
 8004aaa:	6022      	str	r2, [r4, #0]
 8004aac:	d504      	bpl.n	8004ab8 <__sflush_r+0x7c>
 8004aae:	1c42      	adds	r2, r0, #1
 8004ab0:	d101      	bne.n	8004ab6 <__sflush_r+0x7a>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	b903      	cbnz	r3, 8004ab8 <__sflush_r+0x7c>
 8004ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aba:	602f      	str	r7, [r5, #0]
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d0ca      	beq.n	8004a56 <__sflush_r+0x1a>
 8004ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d002      	beq.n	8004ace <__sflush_r+0x92>
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 f9d5 	bl	8004e78 <_free_r>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ad2:	e7c1      	b.n	8004a58 <__sflush_r+0x1c>
 8004ad4:	6a21      	ldr	r1, [r4, #32]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b0      	blx	r6
 8004adc:	1c41      	adds	r1, r0, #1
 8004ade:	d1c7      	bne.n	8004a70 <__sflush_r+0x34>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0c4      	beq.n	8004a70 <__sflush_r+0x34>
 8004ae6:	2b1d      	cmp	r3, #29
 8004ae8:	d001      	beq.n	8004aee <__sflush_r+0xb2>
 8004aea:	2b16      	cmp	r3, #22
 8004aec:	d101      	bne.n	8004af2 <__sflush_r+0xb6>
 8004aee:	602f      	str	r7, [r5, #0]
 8004af0:	e7b1      	b.n	8004a56 <__sflush_r+0x1a>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	e7ad      	b.n	8004a58 <__sflush_r+0x1c>
 8004afc:	690f      	ldr	r7, [r1, #16]
 8004afe:	2f00      	cmp	r7, #0
 8004b00:	d0a9      	beq.n	8004a56 <__sflush_r+0x1a>
 8004b02:	0793      	lsls	r3, r2, #30
 8004b04:	bf18      	it	ne
 8004b06:	2300      	movne	r3, #0
 8004b08:	680e      	ldr	r6, [r1, #0]
 8004b0a:	bf08      	it	eq
 8004b0c:	694b      	ldreq	r3, [r1, #20]
 8004b0e:	eba6 0807 	sub.w	r8, r6, r7
 8004b12:	600f      	str	r7, [r1, #0]
 8004b14:	608b      	str	r3, [r1, #8]
 8004b16:	f1b8 0f00 	cmp.w	r8, #0
 8004b1a:	dd9c      	ble.n	8004a56 <__sflush_r+0x1a>
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	463a      	mov	r2, r7
 8004b20:	4628      	mov	r0, r5
 8004b22:	6a21      	ldr	r1, [r4, #32]
 8004b24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b26:	47b0      	blx	r6
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	dc06      	bgt.n	8004b3a <__sflush_r+0xfe>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	e78e      	b.n	8004a58 <__sflush_r+0x1c>
 8004b3a:	4407      	add	r7, r0
 8004b3c:	eba8 0800 	sub.w	r8, r8, r0
 8004b40:	e7e9      	b.n	8004b16 <__sflush_r+0xda>
 8004b42:	bf00      	nop
 8004b44:	20400001 	.word	0x20400001

08004b48 <_fflush_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	690b      	ldr	r3, [r1, #16]
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	b913      	cbnz	r3, 8004b58 <_fflush_r+0x10>
 8004b52:	2500      	movs	r5, #0
 8004b54:	4628      	mov	r0, r5
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	b118      	cbz	r0, 8004b62 <_fflush_r+0x1a>
 8004b5a:	6983      	ldr	r3, [r0, #24]
 8004b5c:	b90b      	cbnz	r3, 8004b62 <_fflush_r+0x1a>
 8004b5e:	f000 f887 	bl	8004c70 <__sinit>
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <_fflush_r+0x6c>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	d11b      	bne.n	8004ba0 <_fflush_r+0x58>
 8004b68:	686c      	ldr	r4, [r5, #4]
 8004b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ef      	beq.n	8004b52 <_fflush_r+0xa>
 8004b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b74:	07d0      	lsls	r0, r2, #31
 8004b76:	d404      	bmi.n	8004b82 <_fflush_r+0x3a>
 8004b78:	0599      	lsls	r1, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <_fflush_r+0x3a>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7e:	f000 f915 	bl	8004dac <__retarget_lock_acquire_recursive>
 8004b82:	4628      	mov	r0, r5
 8004b84:	4621      	mov	r1, r4
 8004b86:	f7ff ff59 	bl	8004a3c <__sflush_r>
 8004b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	07da      	lsls	r2, r3, #31
 8004b90:	d4e0      	bmi.n	8004b54 <_fflush_r+0xc>
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	059b      	lsls	r3, r3, #22
 8004b96:	d4dd      	bmi.n	8004b54 <_fflush_r+0xc>
 8004b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9a:	f000 f908 	bl	8004dae <__retarget_lock_release_recursive>
 8004b9e:	e7d9      	b.n	8004b54 <_fflush_r+0xc>
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <_fflush_r+0x70>)
 8004ba2:	429c      	cmp	r4, r3
 8004ba4:	d101      	bne.n	8004baa <_fflush_r+0x62>
 8004ba6:	68ac      	ldr	r4, [r5, #8]
 8004ba8:	e7df      	b.n	8004b6a <_fflush_r+0x22>
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <_fflush_r+0x74>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	bf08      	it	eq
 8004bb0:	68ec      	ldreq	r4, [r5, #12]
 8004bb2:	e7da      	b.n	8004b6a <_fflush_r+0x22>
 8004bb4:	08005960 	.word	0x08005960
 8004bb8:	08005980 	.word	0x08005980
 8004bbc:	08005940 	.word	0x08005940

08004bc0 <std>:
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bce:	6083      	str	r3, [r0, #8]
 8004bd0:	8181      	strh	r1, [r0, #12]
 8004bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8004bd4:	81c2      	strh	r2, [r0, #14]
 8004bd6:	6183      	str	r3, [r0, #24]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	2208      	movs	r2, #8
 8004bdc:	305c      	adds	r0, #92	; 0x5c
 8004bde:	f7ff fdd7 	bl	8004790 <memset>
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <std+0x38>)
 8004be4:	6224      	str	r4, [r4, #32]
 8004be6:	6263      	str	r3, [r4, #36]	; 0x24
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <std+0x3c>)
 8004bea:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <std+0x40>)
 8004bee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <std+0x44>)
 8004bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop
 8004bf8:	080055c1 	.word	0x080055c1
 8004bfc:	080055e3 	.word	0x080055e3
 8004c00:	0800561b 	.word	0x0800561b
 8004c04:	0800563f 	.word	0x0800563f

08004c08 <_cleanup_r>:
 8004c08:	4901      	ldr	r1, [pc, #4]	; (8004c10 <_cleanup_r+0x8>)
 8004c0a:	f000 b8af 	b.w	8004d6c <_fwalk_reent>
 8004c0e:	bf00      	nop
 8004c10:	08004b49 	.word	0x08004b49

08004c14 <__sfmoreglue>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	2568      	movs	r5, #104	; 0x68
 8004c18:	1e4a      	subs	r2, r1, #1
 8004c1a:	4355      	muls	r5, r2
 8004c1c:	460e      	mov	r6, r1
 8004c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c22:	f000 f975 	bl	8004f10 <_malloc_r>
 8004c26:	4604      	mov	r4, r0
 8004c28:	b140      	cbz	r0, 8004c3c <__sfmoreglue+0x28>
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c30:	300c      	adds	r0, #12
 8004c32:	60a0      	str	r0, [r4, #8]
 8004c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c38:	f7ff fdaa 	bl	8004790 <memset>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}

08004c40 <__sfp_lock_acquire>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sfp_lock_acquire+0x8>)
 8004c42:	f000 b8b3 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	2000020c 	.word	0x2000020c

08004c4c <__sfp_lock_release>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sfp_lock_release+0x8>)
 8004c4e:	f000 b8ae 	b.w	8004dae <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	2000020c 	.word	0x2000020c

08004c58 <__sinit_lock_acquire>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sinit_lock_acquire+0x8>)
 8004c5a:	f000 b8a7 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004c5e:	bf00      	nop
 8004c60:	20000207 	.word	0x20000207

08004c64 <__sinit_lock_release>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__sinit_lock_release+0x8>)
 8004c66:	f000 b8a2 	b.w	8004dae <__retarget_lock_release_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	20000207 	.word	0x20000207

08004c70 <__sinit>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4604      	mov	r4, r0
 8004c74:	f7ff fff0 	bl	8004c58 <__sinit_lock_acquire>
 8004c78:	69a3      	ldr	r3, [r4, #24]
 8004c7a:	b11b      	cbz	r3, 8004c84 <__sinit+0x14>
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	f7ff bff0 	b.w	8004c64 <__sinit_lock_release>
 8004c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c88:	6523      	str	r3, [r4, #80]	; 0x50
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <__sinit+0x68>)
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <__sinit+0x6c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	bf08      	it	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bf08      	it	eq
 8004c9c:	61a3      	streq	r3, [r4, #24]
 8004c9e:	f000 f81f 	bl	8004ce0 <__sfp>
 8004ca2:	6060      	str	r0, [r4, #4]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 f81b 	bl	8004ce0 <__sfp>
 8004caa:	60a0      	str	r0, [r4, #8]
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 f817 	bl	8004ce0 <__sfp>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	60e0      	str	r0, [r4, #12]
 8004cb8:	6860      	ldr	r0, [r4, #4]
 8004cba:	f7ff ff81 	bl	8004bc0 <std>
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2109      	movs	r1, #9
 8004cc2:	68a0      	ldr	r0, [r4, #8]
 8004cc4:	f7ff ff7c 	bl	8004bc0 <std>
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2112      	movs	r1, #18
 8004ccc:	68e0      	ldr	r0, [r4, #12]
 8004cce:	f7ff ff77 	bl	8004bc0 <std>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61a3      	str	r3, [r4, #24]
 8004cd6:	e7d1      	b.n	8004c7c <__sinit+0xc>
 8004cd8:	0800593c 	.word	0x0800593c
 8004cdc:	08004c09 	.word	0x08004c09

08004ce0 <__sfp>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	f7ff ffac 	bl	8004c40 <__sfp_lock_acquire>
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <__sfp+0x84>)
 8004cea:	681e      	ldr	r6, [r3, #0]
 8004cec:	69b3      	ldr	r3, [r6, #24]
 8004cee:	b913      	cbnz	r3, 8004cf6 <__sfp+0x16>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff ffbd 	bl	8004c70 <__sinit>
 8004cf6:	3648      	adds	r6, #72	; 0x48
 8004cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	d503      	bpl.n	8004d08 <__sfp+0x28>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	b30b      	cbz	r3, 8004d48 <__sfp+0x68>
 8004d04:	6836      	ldr	r6, [r6, #0]
 8004d06:	e7f7      	b.n	8004cf8 <__sfp+0x18>
 8004d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d0c:	b9d5      	cbnz	r5, 8004d44 <__sfp+0x64>
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <__sfp+0x88>)
 8004d10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d14:	60e3      	str	r3, [r4, #12]
 8004d16:	6665      	str	r5, [r4, #100]	; 0x64
 8004d18:	f000 f847 	bl	8004daa <__retarget_lock_init_recursive>
 8004d1c:	f7ff ff96 	bl	8004c4c <__sfp_lock_release>
 8004d20:	2208      	movs	r2, #8
 8004d22:	4629      	mov	r1, r5
 8004d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	61a5      	str	r5, [r4, #24]
 8004d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d34:	f7ff fd2c 	bl	8004790 <memset>
 8004d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d40:	4620      	mov	r0, r4
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	3468      	adds	r4, #104	; 0x68
 8004d46:	e7d9      	b.n	8004cfc <__sfp+0x1c>
 8004d48:	2104      	movs	r1, #4
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7ff ff62 	bl	8004c14 <__sfmoreglue>
 8004d50:	4604      	mov	r4, r0
 8004d52:	6030      	str	r0, [r6, #0]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1d5      	bne.n	8004d04 <__sfp+0x24>
 8004d58:	f7ff ff78 	bl	8004c4c <__sfp_lock_release>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	e7ee      	b.n	8004d40 <__sfp+0x60>
 8004d62:	bf00      	nop
 8004d64:	0800593c 	.word	0x0800593c
 8004d68:	ffff0001 	.word	0xffff0001

08004d6c <_fwalk_reent>:
 8004d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d70:	4606      	mov	r6, r0
 8004d72:	4688      	mov	r8, r1
 8004d74:	2700      	movs	r7, #0
 8004d76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004d82:	d505      	bpl.n	8004d90 <_fwalk_reent+0x24>
 8004d84:	6824      	ldr	r4, [r4, #0]
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d1f7      	bne.n	8004d7a <_fwalk_reent+0xe>
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d907      	bls.n	8004da6 <_fwalk_reent+0x3a>
 8004d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d003      	beq.n	8004da6 <_fwalk_reent+0x3a>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4630      	mov	r0, r6
 8004da2:	47c0      	blx	r8
 8004da4:	4307      	orrs	r7, r0
 8004da6:	3568      	adds	r5, #104	; 0x68
 8004da8:	e7e9      	b.n	8004d7e <_fwalk_reent+0x12>

08004daa <__retarget_lock_init_recursive>:
 8004daa:	4770      	bx	lr

08004dac <__retarget_lock_acquire_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_release_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <__swhatbuf_r>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	460e      	mov	r6, r1
 8004db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db8:	4614      	mov	r4, r2
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	461d      	mov	r5, r3
 8004dbe:	b096      	sub	sp, #88	; 0x58
 8004dc0:	da07      	bge.n	8004dd2 <__swhatbuf_r+0x22>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	89b3      	ldrh	r3, [r6, #12]
 8004dc8:	061a      	lsls	r2, r3, #24
 8004dca:	d410      	bmi.n	8004dee <__swhatbuf_r+0x3e>
 8004dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd0:	e00e      	b.n	8004df0 <__swhatbuf_r+0x40>
 8004dd2:	466a      	mov	r2, sp
 8004dd4:	f000 fc5a 	bl	800568c <_fstat_r>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	dbf2      	blt.n	8004dc2 <__swhatbuf_r+0x12>
 8004ddc:	9a01      	ldr	r2, [sp, #4]
 8004dde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004de2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004de6:	425a      	negs	r2, r3
 8004de8:	415a      	adcs	r2, r3
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	e7ee      	b.n	8004dcc <__swhatbuf_r+0x1c>
 8004dee:	2340      	movs	r3, #64	; 0x40
 8004df0:	2000      	movs	r0, #0
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	b016      	add	sp, #88	; 0x58
 8004df6:	bd70      	pop	{r4, r5, r6, pc}

08004df8 <__smakebuf_r>:
 8004df8:	898b      	ldrh	r3, [r1, #12]
 8004dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dfc:	079d      	lsls	r5, r3, #30
 8004dfe:	4606      	mov	r6, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	d507      	bpl.n	8004e14 <__smakebuf_r+0x1c>
 8004e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	6163      	str	r3, [r4, #20]
 8004e10:	b002      	add	sp, #8
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	466a      	mov	r2, sp
 8004e16:	ab01      	add	r3, sp, #4
 8004e18:	f7ff ffca 	bl	8004db0 <__swhatbuf_r>
 8004e1c:	9900      	ldr	r1, [sp, #0]
 8004e1e:	4605      	mov	r5, r0
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 f875 	bl	8004f10 <_malloc_r>
 8004e26:	b948      	cbnz	r0, 8004e3c <__smakebuf_r+0x44>
 8004e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e2c:	059a      	lsls	r2, r3, #22
 8004e2e:	d4ef      	bmi.n	8004e10 <__smakebuf_r+0x18>
 8004e30:	f023 0303 	bic.w	r3, r3, #3
 8004e34:	f043 0302 	orr.w	r3, r3, #2
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	e7e3      	b.n	8004e04 <__smakebuf_r+0xc>
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <__smakebuf_r+0x7c>)
 8004e3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	6020      	str	r0, [r4, #0]
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	9b00      	ldr	r3, [sp, #0]
 8004e4c:	6120      	str	r0, [r4, #16]
 8004e4e:	6163      	str	r3, [r4, #20]
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	b15b      	cbz	r3, 8004e6c <__smakebuf_r+0x74>
 8004e54:	4630      	mov	r0, r6
 8004e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5a:	f000 fc29 	bl	80056b0 <_isatty_r>
 8004e5e:	b128      	cbz	r0, 8004e6c <__smakebuf_r+0x74>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	89a0      	ldrh	r0, [r4, #12]
 8004e6e:	4305      	orrs	r5, r0
 8004e70:	81a5      	strh	r5, [r4, #12]
 8004e72:	e7cd      	b.n	8004e10 <__smakebuf_r+0x18>
 8004e74:	08004c09 	.word	0x08004c09

08004e78 <_free_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d043      	beq.n	8004f08 <_free_r+0x90>
 8004e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	18e4      	addlt	r4, r4, r3
 8004e8c:	f000 fc40 	bl	8005710 <__malloc_lock>
 8004e90:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <_free_r+0x94>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	4610      	mov	r0, r2
 8004e96:	b933      	cbnz	r3, 8004ea6 <_free_r+0x2e>
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	6014      	str	r4, [r2, #0]
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea2:	f000 bc3b 	b.w	800571c <__malloc_unlock>
 8004ea6:	42a3      	cmp	r3, r4
 8004ea8:	d90a      	bls.n	8004ec0 <_free_r+0x48>
 8004eaa:	6821      	ldr	r1, [r4, #0]
 8004eac:	1862      	adds	r2, r4, r1
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bf01      	itttt	eq
 8004eb2:	681a      	ldreq	r2, [r3, #0]
 8004eb4:	685b      	ldreq	r3, [r3, #4]
 8004eb6:	1852      	addeq	r2, r2, r1
 8004eb8:	6022      	streq	r2, [r4, #0]
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	6004      	str	r4, [r0, #0]
 8004ebe:	e7ed      	b.n	8004e9c <_free_r+0x24>
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	b10b      	cbz	r3, 8004eca <_free_r+0x52>
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	d9fa      	bls.n	8004ec0 <_free_r+0x48>
 8004eca:	6811      	ldr	r1, [r2, #0]
 8004ecc:	1850      	adds	r0, r2, r1
 8004ece:	42a0      	cmp	r0, r4
 8004ed0:	d10b      	bne.n	8004eea <_free_r+0x72>
 8004ed2:	6820      	ldr	r0, [r4, #0]
 8004ed4:	4401      	add	r1, r0
 8004ed6:	1850      	adds	r0, r2, r1
 8004ed8:	4283      	cmp	r3, r0
 8004eda:	6011      	str	r1, [r2, #0]
 8004edc:	d1de      	bne.n	8004e9c <_free_r+0x24>
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4401      	add	r1, r0
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	6053      	str	r3, [r2, #4]
 8004ee8:	e7d8      	b.n	8004e9c <_free_r+0x24>
 8004eea:	d902      	bls.n	8004ef2 <_free_r+0x7a>
 8004eec:	230c      	movs	r3, #12
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	e7d4      	b.n	8004e9c <_free_r+0x24>
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	1821      	adds	r1, r4, r0
 8004ef6:	428b      	cmp	r3, r1
 8004ef8:	bf01      	itttt	eq
 8004efa:	6819      	ldreq	r1, [r3, #0]
 8004efc:	685b      	ldreq	r3, [r3, #4]
 8004efe:	1809      	addeq	r1, r1, r0
 8004f00:	6021      	streq	r1, [r4, #0]
 8004f02:	6063      	str	r3, [r4, #4]
 8004f04:	6054      	str	r4, [r2, #4]
 8004f06:	e7c9      	b.n	8004e9c <_free_r+0x24>
 8004f08:	bd38      	pop	{r3, r4, r5, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000120 	.word	0x20000120

08004f10 <_malloc_r>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	1ccd      	adds	r5, r1, #3
 8004f14:	f025 0503 	bic.w	r5, r5, #3
 8004f18:	3508      	adds	r5, #8
 8004f1a:	2d0c      	cmp	r5, #12
 8004f1c:	bf38      	it	cc
 8004f1e:	250c      	movcc	r5, #12
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	4606      	mov	r6, r0
 8004f24:	db01      	blt.n	8004f2a <_malloc_r+0x1a>
 8004f26:	42a9      	cmp	r1, r5
 8004f28:	d903      	bls.n	8004f32 <_malloc_r+0x22>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	2000      	movs	r0, #0
 8004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f32:	f000 fbed 	bl	8005710 <__malloc_lock>
 8004f36:	4921      	ldr	r1, [pc, #132]	; (8004fbc <_malloc_r+0xac>)
 8004f38:	680a      	ldr	r2, [r1, #0]
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	b99c      	cbnz	r4, 8004f66 <_malloc_r+0x56>
 8004f3e:	4f20      	ldr	r7, [pc, #128]	; (8004fc0 <_malloc_r+0xb0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	b923      	cbnz	r3, 8004f4e <_malloc_r+0x3e>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 fb2a 	bl	80055a0 <_sbrk_r>
 8004f4c:	6038      	str	r0, [r7, #0]
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 fb25 	bl	80055a0 <_sbrk_r>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	d123      	bne.n	8004fa2 <_malloc_r+0x92>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	6033      	str	r3, [r6, #0]
 8004f60:	f000 fbdc 	bl	800571c <__malloc_unlock>
 8004f64:	e7e3      	b.n	8004f2e <_malloc_r+0x1e>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	1b5b      	subs	r3, r3, r5
 8004f6a:	d417      	bmi.n	8004f9c <_malloc_r+0x8c>
 8004f6c:	2b0b      	cmp	r3, #11
 8004f6e:	d903      	bls.n	8004f78 <_malloc_r+0x68>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	441c      	add	r4, r3
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	e004      	b.n	8004f82 <_malloc_r+0x72>
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	42a2      	cmp	r2, r4
 8004f7c:	bf0c      	ite	eq
 8004f7e:	600b      	streq	r3, [r1, #0]
 8004f80:	6053      	strne	r3, [r2, #4]
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 fbca 	bl	800571c <__malloc_unlock>
 8004f88:	f104 000b 	add.w	r0, r4, #11
 8004f8c:	1d23      	adds	r3, r4, #4
 8004f8e:	f020 0007 	bic.w	r0, r0, #7
 8004f92:	1ac2      	subs	r2, r0, r3
 8004f94:	d0cc      	beq.n	8004f30 <_malloc_r+0x20>
 8004f96:	1a1b      	subs	r3, r3, r0
 8004f98:	50a3      	str	r3, [r4, r2]
 8004f9a:	e7c9      	b.n	8004f30 <_malloc_r+0x20>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	6864      	ldr	r4, [r4, #4]
 8004fa0:	e7cc      	b.n	8004f3c <_malloc_r+0x2c>
 8004fa2:	1cc4      	adds	r4, r0, #3
 8004fa4:	f024 0403 	bic.w	r4, r4, #3
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	d0e3      	beq.n	8004f74 <_malloc_r+0x64>
 8004fac:	1a21      	subs	r1, r4, r0
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f000 faf6 	bl	80055a0 <_sbrk_r>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d1dd      	bne.n	8004f74 <_malloc_r+0x64>
 8004fb8:	e7cf      	b.n	8004f5a <_malloc_r+0x4a>
 8004fba:	bf00      	nop
 8004fbc:	20000120 	.word	0x20000120
 8004fc0:	20000124 	.word	0x20000124

08004fc4 <__sfputc_r>:
 8004fc4:	6893      	ldr	r3, [r2, #8]
 8004fc6:	b410      	push	{r4}
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	6093      	str	r3, [r2, #8]
 8004fce:	da07      	bge.n	8004fe0 <__sfputc_r+0x1c>
 8004fd0:	6994      	ldr	r4, [r2, #24]
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	db01      	blt.n	8004fda <__sfputc_r+0x16>
 8004fd6:	290a      	cmp	r1, #10
 8004fd8:	d102      	bne.n	8004fe0 <__sfputc_r+0x1c>
 8004fda:	bc10      	pop	{r4}
 8004fdc:	f7ff bc6e 	b.w	80048bc <__swbuf_r>
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	1c58      	adds	r0, r3, #1
 8004fe4:	6010      	str	r0, [r2, #0]
 8004fe6:	7019      	strb	r1, [r3, #0]
 8004fe8:	4608      	mov	r0, r1
 8004fea:	bc10      	pop	{r4}
 8004fec:	4770      	bx	lr

08004fee <__sfputs_r>:
 8004fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	460f      	mov	r7, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	18d5      	adds	r5, r2, r3
 8004ff8:	42ac      	cmp	r4, r5
 8004ffa:	d101      	bne.n	8005000 <__sfputs_r+0x12>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e007      	b.n	8005010 <__sfputs_r+0x22>
 8005000:	463a      	mov	r2, r7
 8005002:	4630      	mov	r0, r6
 8005004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005008:	f7ff ffdc 	bl	8004fc4 <__sfputc_r>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d1f3      	bne.n	8004ff8 <__sfputs_r+0xa>
 8005010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005014 <_vfiprintf_r>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	460d      	mov	r5, r1
 800501a:	4614      	mov	r4, r2
 800501c:	4698      	mov	r8, r3
 800501e:	4606      	mov	r6, r0
 8005020:	b09d      	sub	sp, #116	; 0x74
 8005022:	b118      	cbz	r0, 800502c <_vfiprintf_r+0x18>
 8005024:	6983      	ldr	r3, [r0, #24]
 8005026:	b90b      	cbnz	r3, 800502c <_vfiprintf_r+0x18>
 8005028:	f7ff fe22 	bl	8004c70 <__sinit>
 800502c:	4b89      	ldr	r3, [pc, #548]	; (8005254 <_vfiprintf_r+0x240>)
 800502e:	429d      	cmp	r5, r3
 8005030:	d11b      	bne.n	800506a <_vfiprintf_r+0x56>
 8005032:	6875      	ldr	r5, [r6, #4]
 8005034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005036:	07d9      	lsls	r1, r3, #31
 8005038:	d405      	bmi.n	8005046 <_vfiprintf_r+0x32>
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	059a      	lsls	r2, r3, #22
 800503e:	d402      	bmi.n	8005046 <_vfiprintf_r+0x32>
 8005040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005042:	f7ff feb3 	bl	8004dac <__retarget_lock_acquire_recursive>
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	071b      	lsls	r3, r3, #28
 800504a:	d501      	bpl.n	8005050 <_vfiprintf_r+0x3c>
 800504c:	692b      	ldr	r3, [r5, #16]
 800504e:	b9eb      	cbnz	r3, 800508c <_vfiprintf_r+0x78>
 8005050:	4629      	mov	r1, r5
 8005052:	4630      	mov	r0, r6
 8005054:	f7ff fc84 	bl	8004960 <__swsetup_r>
 8005058:	b1c0      	cbz	r0, 800508c <_vfiprintf_r+0x78>
 800505a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505c:	07dc      	lsls	r4, r3, #31
 800505e:	d50e      	bpl.n	800507e <_vfiprintf_r+0x6a>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	b01d      	add	sp, #116	; 0x74
 8005066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506a:	4b7b      	ldr	r3, [pc, #492]	; (8005258 <_vfiprintf_r+0x244>)
 800506c:	429d      	cmp	r5, r3
 800506e:	d101      	bne.n	8005074 <_vfiprintf_r+0x60>
 8005070:	68b5      	ldr	r5, [r6, #8]
 8005072:	e7df      	b.n	8005034 <_vfiprintf_r+0x20>
 8005074:	4b79      	ldr	r3, [pc, #484]	; (800525c <_vfiprintf_r+0x248>)
 8005076:	429d      	cmp	r5, r3
 8005078:	bf08      	it	eq
 800507a:	68f5      	ldreq	r5, [r6, #12]
 800507c:	e7da      	b.n	8005034 <_vfiprintf_r+0x20>
 800507e:	89ab      	ldrh	r3, [r5, #12]
 8005080:	0598      	lsls	r0, r3, #22
 8005082:	d4ed      	bmi.n	8005060 <_vfiprintf_r+0x4c>
 8005084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005086:	f7ff fe92 	bl	8004dae <__retarget_lock_release_recursive>
 800508a:	e7e9      	b.n	8005060 <_vfiprintf_r+0x4c>
 800508c:	2300      	movs	r3, #0
 800508e:	9309      	str	r3, [sp, #36]	; 0x24
 8005090:	2320      	movs	r3, #32
 8005092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005096:	2330      	movs	r3, #48	; 0x30
 8005098:	f04f 0901 	mov.w	r9, #1
 800509c:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005260 <_vfiprintf_r+0x24c>
 80050a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050a8:	4623      	mov	r3, r4
 80050aa:	469a      	mov	sl, r3
 80050ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b0:	b10a      	cbz	r2, 80050b6 <_vfiprintf_r+0xa2>
 80050b2:	2a25      	cmp	r2, #37	; 0x25
 80050b4:	d1f9      	bne.n	80050aa <_vfiprintf_r+0x96>
 80050b6:	ebba 0b04 	subs.w	fp, sl, r4
 80050ba:	d00b      	beq.n	80050d4 <_vfiprintf_r+0xc0>
 80050bc:	465b      	mov	r3, fp
 80050be:	4622      	mov	r2, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7ff ff93 	bl	8004fee <__sfputs_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	f000 80aa 	beq.w	8005222 <_vfiprintf_r+0x20e>
 80050ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d0:	445a      	add	r2, fp
 80050d2:	9209      	str	r2, [sp, #36]	; 0x24
 80050d4:	f89a 3000 	ldrb.w	r3, [sl]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80a2 	beq.w	8005222 <_vfiprintf_r+0x20e>
 80050de:	2300      	movs	r3, #0
 80050e0:	f04f 32ff 	mov.w	r2, #4294967295
 80050e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050e8:	f10a 0a01 	add.w	sl, sl, #1
 80050ec:	9304      	str	r3, [sp, #16]
 80050ee:	9307      	str	r3, [sp, #28]
 80050f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050f4:	931a      	str	r3, [sp, #104]	; 0x68
 80050f6:	4654      	mov	r4, sl
 80050f8:	2205      	movs	r2, #5
 80050fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fe:	4858      	ldr	r0, [pc, #352]	; (8005260 <_vfiprintf_r+0x24c>)
 8005100:	f000 faf8 	bl	80056f4 <memchr>
 8005104:	9a04      	ldr	r2, [sp, #16]
 8005106:	b9d8      	cbnz	r0, 8005140 <_vfiprintf_r+0x12c>
 8005108:	06d1      	lsls	r1, r2, #27
 800510a:	bf44      	itt	mi
 800510c:	2320      	movmi	r3, #32
 800510e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005112:	0713      	lsls	r3, r2, #28
 8005114:	bf44      	itt	mi
 8005116:	232b      	movmi	r3, #43	; 0x2b
 8005118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800511c:	f89a 3000 	ldrb.w	r3, [sl]
 8005120:	2b2a      	cmp	r3, #42	; 0x2a
 8005122:	d015      	beq.n	8005150 <_vfiprintf_r+0x13c>
 8005124:	4654      	mov	r4, sl
 8005126:	2000      	movs	r0, #0
 8005128:	f04f 0c0a 	mov.w	ip, #10
 800512c:	9a07      	ldr	r2, [sp, #28]
 800512e:	4621      	mov	r1, r4
 8005130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005134:	3b30      	subs	r3, #48	; 0x30
 8005136:	2b09      	cmp	r3, #9
 8005138:	d94e      	bls.n	80051d8 <_vfiprintf_r+0x1c4>
 800513a:	b1b0      	cbz	r0, 800516a <_vfiprintf_r+0x156>
 800513c:	9207      	str	r2, [sp, #28]
 800513e:	e014      	b.n	800516a <_vfiprintf_r+0x156>
 8005140:	eba0 0308 	sub.w	r3, r0, r8
 8005144:	fa09 f303 	lsl.w	r3, r9, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	46a2      	mov	sl, r4
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	e7d2      	b.n	80050f6 <_vfiprintf_r+0xe2>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	1d19      	adds	r1, r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	9103      	str	r1, [sp, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	bfbb      	ittet	lt
 800515c:	425b      	neglt	r3, r3
 800515e:	f042 0202 	orrlt.w	r2, r2, #2
 8005162:	9307      	strge	r3, [sp, #28]
 8005164:	9307      	strlt	r3, [sp, #28]
 8005166:	bfb8      	it	lt
 8005168:	9204      	strlt	r2, [sp, #16]
 800516a:	7823      	ldrb	r3, [r4, #0]
 800516c:	2b2e      	cmp	r3, #46	; 0x2e
 800516e:	d10c      	bne.n	800518a <_vfiprintf_r+0x176>
 8005170:	7863      	ldrb	r3, [r4, #1]
 8005172:	2b2a      	cmp	r3, #42	; 0x2a
 8005174:	d135      	bne.n	80051e2 <_vfiprintf_r+0x1ce>
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	3402      	adds	r4, #2
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	9203      	str	r2, [sp, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	bfb8      	it	lt
 8005184:	f04f 33ff 	movlt.w	r3, #4294967295
 8005188:	9305      	str	r3, [sp, #20]
 800518a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005270 <_vfiprintf_r+0x25c>
 800518e:	2203      	movs	r2, #3
 8005190:	4650      	mov	r0, sl
 8005192:	7821      	ldrb	r1, [r4, #0]
 8005194:	f000 faae 	bl	80056f4 <memchr>
 8005198:	b140      	cbz	r0, 80051ac <_vfiprintf_r+0x198>
 800519a:	2340      	movs	r3, #64	; 0x40
 800519c:	eba0 000a 	sub.w	r0, r0, sl
 80051a0:	fa03 f000 	lsl.w	r0, r3, r0
 80051a4:	9b04      	ldr	r3, [sp, #16]
 80051a6:	3401      	adds	r4, #1
 80051a8:	4303      	orrs	r3, r0
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b0:	2206      	movs	r2, #6
 80051b2:	482c      	ldr	r0, [pc, #176]	; (8005264 <_vfiprintf_r+0x250>)
 80051b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051b8:	f000 fa9c 	bl	80056f4 <memchr>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d03f      	beq.n	8005240 <_vfiprintf_r+0x22c>
 80051c0:	4b29      	ldr	r3, [pc, #164]	; (8005268 <_vfiprintf_r+0x254>)
 80051c2:	bb1b      	cbnz	r3, 800520c <_vfiprintf_r+0x1f8>
 80051c4:	9b03      	ldr	r3, [sp, #12]
 80051c6:	3307      	adds	r3, #7
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	3308      	adds	r3, #8
 80051ce:	9303      	str	r3, [sp, #12]
 80051d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d2:	443b      	add	r3, r7
 80051d4:	9309      	str	r3, [sp, #36]	; 0x24
 80051d6:	e767      	b.n	80050a8 <_vfiprintf_r+0x94>
 80051d8:	460c      	mov	r4, r1
 80051da:	2001      	movs	r0, #1
 80051dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e0:	e7a5      	b.n	800512e <_vfiprintf_r+0x11a>
 80051e2:	2300      	movs	r3, #0
 80051e4:	f04f 0c0a 	mov.w	ip, #10
 80051e8:	4619      	mov	r1, r3
 80051ea:	3401      	adds	r4, #1
 80051ec:	9305      	str	r3, [sp, #20]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f4:	3a30      	subs	r2, #48	; 0x30
 80051f6:	2a09      	cmp	r2, #9
 80051f8:	d903      	bls.n	8005202 <_vfiprintf_r+0x1ee>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0c5      	beq.n	800518a <_vfiprintf_r+0x176>
 80051fe:	9105      	str	r1, [sp, #20]
 8005200:	e7c3      	b.n	800518a <_vfiprintf_r+0x176>
 8005202:	4604      	mov	r4, r0
 8005204:	2301      	movs	r3, #1
 8005206:	fb0c 2101 	mla	r1, ip, r1, r2
 800520a:	e7f0      	b.n	80051ee <_vfiprintf_r+0x1da>
 800520c:	ab03      	add	r3, sp, #12
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	462a      	mov	r2, r5
 8005212:	4630      	mov	r0, r6
 8005214:	4b15      	ldr	r3, [pc, #84]	; (800526c <_vfiprintf_r+0x258>)
 8005216:	a904      	add	r1, sp, #16
 8005218:	f3af 8000 	nop.w
 800521c:	4607      	mov	r7, r0
 800521e:	1c78      	adds	r0, r7, #1
 8005220:	d1d6      	bne.n	80051d0 <_vfiprintf_r+0x1bc>
 8005222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005224:	07d9      	lsls	r1, r3, #31
 8005226:	d405      	bmi.n	8005234 <_vfiprintf_r+0x220>
 8005228:	89ab      	ldrh	r3, [r5, #12]
 800522a:	059a      	lsls	r2, r3, #22
 800522c:	d402      	bmi.n	8005234 <_vfiprintf_r+0x220>
 800522e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005230:	f7ff fdbd 	bl	8004dae <__retarget_lock_release_recursive>
 8005234:	89ab      	ldrh	r3, [r5, #12]
 8005236:	065b      	lsls	r3, r3, #25
 8005238:	f53f af12 	bmi.w	8005060 <_vfiprintf_r+0x4c>
 800523c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800523e:	e711      	b.n	8005064 <_vfiprintf_r+0x50>
 8005240:	ab03      	add	r3, sp, #12
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	462a      	mov	r2, r5
 8005246:	4630      	mov	r0, r6
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <_vfiprintf_r+0x258>)
 800524a:	a904      	add	r1, sp, #16
 800524c:	f000 f882 	bl	8005354 <_printf_i>
 8005250:	e7e4      	b.n	800521c <_vfiprintf_r+0x208>
 8005252:	bf00      	nop
 8005254:	08005960 	.word	0x08005960
 8005258:	08005980 	.word	0x08005980
 800525c:	08005940 	.word	0x08005940
 8005260:	080059a0 	.word	0x080059a0
 8005264:	080059aa 	.word	0x080059aa
 8005268:	00000000 	.word	0x00000000
 800526c:	08004fef 	.word	0x08004fef
 8005270:	080059a6 	.word	0x080059a6

08005274 <_printf_common>:
 8005274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	4616      	mov	r6, r2
 800527a:	4699      	mov	r9, r3
 800527c:	688a      	ldr	r2, [r1, #8]
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	4607      	mov	r7, r0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfb8      	it	lt
 8005286:	4613      	movlt	r3, r2
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800528e:	460c      	mov	r4, r1
 8005290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005294:	b10a      	cbz	r2, 800529a <_printf_common+0x26>
 8005296:	3301      	adds	r3, #1
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	0699      	lsls	r1, r3, #26
 800529e:	bf42      	ittt	mi
 80052a0:	6833      	ldrmi	r3, [r6, #0]
 80052a2:	3302      	addmi	r3, #2
 80052a4:	6033      	strmi	r3, [r6, #0]
 80052a6:	6825      	ldr	r5, [r4, #0]
 80052a8:	f015 0506 	ands.w	r5, r5, #6
 80052ac:	d106      	bne.n	80052bc <_printf_common+0x48>
 80052ae:	f104 0a19 	add.w	sl, r4, #25
 80052b2:	68e3      	ldr	r3, [r4, #12]
 80052b4:	6832      	ldr	r2, [r6, #0]
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	42ab      	cmp	r3, r5
 80052ba:	dc28      	bgt.n	800530e <_printf_common+0x9a>
 80052bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c0:	1e13      	subs	r3, r2, #0
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	bf18      	it	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	0692      	lsls	r2, r2, #26
 80052ca:	d42d      	bmi.n	8005328 <_printf_common+0xb4>
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d4:	47c0      	blx	r8
 80052d6:	3001      	adds	r0, #1
 80052d8:	d020      	beq.n	800531c <_printf_common+0xa8>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	68e5      	ldr	r5, [r4, #12]
 80052de:	f003 0306 	and.w	r3, r3, #6
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	bf18      	it	ne
 80052e6:	2500      	movne	r5, #0
 80052e8:	6832      	ldr	r2, [r6, #0]
 80052ea:	f04f 0600 	mov.w	r6, #0
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	bf08      	it	eq
 80052f2:	1aad      	subeq	r5, r5, r2
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	bf08      	it	eq
 80052f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052fc:	4293      	cmp	r3, r2
 80052fe:	bfc4      	itt	gt
 8005300:	1a9b      	subgt	r3, r3, r2
 8005302:	18ed      	addgt	r5, r5, r3
 8005304:	341a      	adds	r4, #26
 8005306:	42b5      	cmp	r5, r6
 8005308:	d11a      	bne.n	8005340 <_printf_common+0xcc>
 800530a:	2000      	movs	r0, #0
 800530c:	e008      	b.n	8005320 <_printf_common+0xac>
 800530e:	2301      	movs	r3, #1
 8005310:	4652      	mov	r2, sl
 8005312:	4649      	mov	r1, r9
 8005314:	4638      	mov	r0, r7
 8005316:	47c0      	blx	r8
 8005318:	3001      	adds	r0, #1
 800531a:	d103      	bne.n	8005324 <_printf_common+0xb0>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005324:	3501      	adds	r5, #1
 8005326:	e7c4      	b.n	80052b2 <_printf_common+0x3e>
 8005328:	2030      	movs	r0, #48	; 0x30
 800532a:	18e1      	adds	r1, r4, r3
 800532c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005336:	4422      	add	r2, r4
 8005338:	3302      	adds	r3, #2
 800533a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800533e:	e7c5      	b.n	80052cc <_printf_common+0x58>
 8005340:	2301      	movs	r3, #1
 8005342:	4622      	mov	r2, r4
 8005344:	4649      	mov	r1, r9
 8005346:	4638      	mov	r0, r7
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d0e6      	beq.n	800531c <_printf_common+0xa8>
 800534e:	3601      	adds	r6, #1
 8005350:	e7d9      	b.n	8005306 <_printf_common+0x92>
	...

08005354 <_printf_i>:
 8005354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	460c      	mov	r4, r1
 800535a:	7e27      	ldrb	r7, [r4, #24]
 800535c:	4691      	mov	r9, r2
 800535e:	2f78      	cmp	r7, #120	; 0x78
 8005360:	4680      	mov	r8, r0
 8005362:	469a      	mov	sl, r3
 8005364:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800536a:	d807      	bhi.n	800537c <_printf_i+0x28>
 800536c:	2f62      	cmp	r7, #98	; 0x62
 800536e:	d80a      	bhi.n	8005386 <_printf_i+0x32>
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80d9 	beq.w	8005528 <_printf_i+0x1d4>
 8005376:	2f58      	cmp	r7, #88	; 0x58
 8005378:	f000 80a4 	beq.w	80054c4 <_printf_i+0x170>
 800537c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005384:	e03a      	b.n	80053fc <_printf_i+0xa8>
 8005386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538a:	2b15      	cmp	r3, #21
 800538c:	d8f6      	bhi.n	800537c <_printf_i+0x28>
 800538e:	a001      	add	r0, pc, #4	; (adr r0, 8005394 <_printf_i+0x40>)
 8005390:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005394:	080053ed 	.word	0x080053ed
 8005398:	08005401 	.word	0x08005401
 800539c:	0800537d 	.word	0x0800537d
 80053a0:	0800537d 	.word	0x0800537d
 80053a4:	0800537d 	.word	0x0800537d
 80053a8:	0800537d 	.word	0x0800537d
 80053ac:	08005401 	.word	0x08005401
 80053b0:	0800537d 	.word	0x0800537d
 80053b4:	0800537d 	.word	0x0800537d
 80053b8:	0800537d 	.word	0x0800537d
 80053bc:	0800537d 	.word	0x0800537d
 80053c0:	0800550f 	.word	0x0800550f
 80053c4:	08005431 	.word	0x08005431
 80053c8:	080054f1 	.word	0x080054f1
 80053cc:	0800537d 	.word	0x0800537d
 80053d0:	0800537d 	.word	0x0800537d
 80053d4:	08005531 	.word	0x08005531
 80053d8:	0800537d 	.word	0x0800537d
 80053dc:	08005431 	.word	0x08005431
 80053e0:	0800537d 	.word	0x0800537d
 80053e4:	0800537d 	.word	0x0800537d
 80053e8:	080054f9 	.word	0x080054f9
 80053ec:	680b      	ldr	r3, [r1, #0]
 80053ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	600a      	str	r2, [r1, #0]
 80053f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0a4      	b.n	800554a <_printf_i+0x1f6>
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	6808      	ldr	r0, [r1, #0]
 8005404:	062e      	lsls	r6, r5, #24
 8005406:	f100 0304 	add.w	r3, r0, #4
 800540a:	d50a      	bpl.n	8005422 <_printf_i+0xce>
 800540c:	6805      	ldr	r5, [r0, #0]
 800540e:	600b      	str	r3, [r1, #0]
 8005410:	2d00      	cmp	r5, #0
 8005412:	da03      	bge.n	800541c <_printf_i+0xc8>
 8005414:	232d      	movs	r3, #45	; 0x2d
 8005416:	426d      	negs	r5, r5
 8005418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541c:	230a      	movs	r3, #10
 800541e:	485e      	ldr	r0, [pc, #376]	; (8005598 <_printf_i+0x244>)
 8005420:	e019      	b.n	8005456 <_printf_i+0x102>
 8005422:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005426:	6805      	ldr	r5, [r0, #0]
 8005428:	600b      	str	r3, [r1, #0]
 800542a:	bf18      	it	ne
 800542c:	b22d      	sxthne	r5, r5
 800542e:	e7ef      	b.n	8005410 <_printf_i+0xbc>
 8005430:	680b      	ldr	r3, [r1, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	1d18      	adds	r0, r3, #4
 8005436:	6008      	str	r0, [r1, #0]
 8005438:	0628      	lsls	r0, r5, #24
 800543a:	d501      	bpl.n	8005440 <_printf_i+0xec>
 800543c:	681d      	ldr	r5, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0xf2>
 8005440:	0669      	lsls	r1, r5, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0xe8>
 8005444:	881d      	ldrh	r5, [r3, #0]
 8005446:	2f6f      	cmp	r7, #111	; 0x6f
 8005448:	bf0c      	ite	eq
 800544a:	2308      	moveq	r3, #8
 800544c:	230a      	movne	r3, #10
 800544e:	4852      	ldr	r0, [pc, #328]	; (8005598 <_printf_i+0x244>)
 8005450:	2100      	movs	r1, #0
 8005452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005456:	6866      	ldr	r6, [r4, #4]
 8005458:	2e00      	cmp	r6, #0
 800545a:	bfa8      	it	ge
 800545c:	6821      	ldrge	r1, [r4, #0]
 800545e:	60a6      	str	r6, [r4, #8]
 8005460:	bfa4      	itt	ge
 8005462:	f021 0104 	bicge.w	r1, r1, #4
 8005466:	6021      	strge	r1, [r4, #0]
 8005468:	b90d      	cbnz	r5, 800546e <_printf_i+0x11a>
 800546a:	2e00      	cmp	r6, #0
 800546c:	d04d      	beq.n	800550a <_printf_i+0x1b6>
 800546e:	4616      	mov	r6, r2
 8005470:	fbb5 f1f3 	udiv	r1, r5, r3
 8005474:	fb03 5711 	mls	r7, r3, r1, r5
 8005478:	5dc7      	ldrb	r7, [r0, r7]
 800547a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800547e:	462f      	mov	r7, r5
 8005480:	42bb      	cmp	r3, r7
 8005482:	460d      	mov	r5, r1
 8005484:	d9f4      	bls.n	8005470 <_printf_i+0x11c>
 8005486:	2b08      	cmp	r3, #8
 8005488:	d10b      	bne.n	80054a2 <_printf_i+0x14e>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	07df      	lsls	r7, r3, #31
 800548e:	d508      	bpl.n	80054a2 <_printf_i+0x14e>
 8005490:	6923      	ldr	r3, [r4, #16]
 8005492:	6861      	ldr	r1, [r4, #4]
 8005494:	4299      	cmp	r1, r3
 8005496:	bfde      	ittt	le
 8005498:	2330      	movle	r3, #48	; 0x30
 800549a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800549e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054a2:	1b92      	subs	r2, r2, r6
 80054a4:	6122      	str	r2, [r4, #16]
 80054a6:	464b      	mov	r3, r9
 80054a8:	4621      	mov	r1, r4
 80054aa:	4640      	mov	r0, r8
 80054ac:	f8cd a000 	str.w	sl, [sp]
 80054b0:	aa03      	add	r2, sp, #12
 80054b2:	f7ff fedf 	bl	8005274 <_printf_common>
 80054b6:	3001      	adds	r0, #1
 80054b8:	d14c      	bne.n	8005554 <_printf_i+0x200>
 80054ba:	f04f 30ff 	mov.w	r0, #4294967295
 80054be:	b004      	add	sp, #16
 80054c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c4:	4834      	ldr	r0, [pc, #208]	; (8005598 <_printf_i+0x244>)
 80054c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054ca:	680e      	ldr	r6, [r1, #0]
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80054d2:	061f      	lsls	r7, r3, #24
 80054d4:	600e      	str	r6, [r1, #0]
 80054d6:	d514      	bpl.n	8005502 <_printf_i+0x1ae>
 80054d8:	07d9      	lsls	r1, r3, #31
 80054da:	bf44      	itt	mi
 80054dc:	f043 0320 	orrmi.w	r3, r3, #32
 80054e0:	6023      	strmi	r3, [r4, #0]
 80054e2:	b91d      	cbnz	r5, 80054ec <_printf_i+0x198>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	2310      	movs	r3, #16
 80054ee:	e7af      	b.n	8005450 <_printf_i+0xfc>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	f043 0320 	orr.w	r3, r3, #32
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	2378      	movs	r3, #120	; 0x78
 80054fa:	4828      	ldr	r0, [pc, #160]	; (800559c <_printf_i+0x248>)
 80054fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005500:	e7e3      	b.n	80054ca <_printf_i+0x176>
 8005502:	065e      	lsls	r6, r3, #25
 8005504:	bf48      	it	mi
 8005506:	b2ad      	uxthmi	r5, r5
 8005508:	e7e6      	b.n	80054d8 <_printf_i+0x184>
 800550a:	4616      	mov	r6, r2
 800550c:	e7bb      	b.n	8005486 <_printf_i+0x132>
 800550e:	680b      	ldr	r3, [r1, #0]
 8005510:	6826      	ldr	r6, [r4, #0]
 8005512:	1d1d      	adds	r5, r3, #4
 8005514:	6960      	ldr	r0, [r4, #20]
 8005516:	600d      	str	r5, [r1, #0]
 8005518:	0635      	lsls	r5, r6, #24
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	d501      	bpl.n	8005522 <_printf_i+0x1ce>
 800551e:	6018      	str	r0, [r3, #0]
 8005520:	e002      	b.n	8005528 <_printf_i+0x1d4>
 8005522:	0671      	lsls	r1, r6, #25
 8005524:	d5fb      	bpl.n	800551e <_printf_i+0x1ca>
 8005526:	8018      	strh	r0, [r3, #0]
 8005528:	2300      	movs	r3, #0
 800552a:	4616      	mov	r6, r2
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	e7ba      	b.n	80054a6 <_printf_i+0x152>
 8005530:	680b      	ldr	r3, [r1, #0]
 8005532:	1d1a      	adds	r2, r3, #4
 8005534:	600a      	str	r2, [r1, #0]
 8005536:	681e      	ldr	r6, [r3, #0]
 8005538:	2100      	movs	r1, #0
 800553a:	4630      	mov	r0, r6
 800553c:	6862      	ldr	r2, [r4, #4]
 800553e:	f000 f8d9 	bl	80056f4 <memchr>
 8005542:	b108      	cbz	r0, 8005548 <_printf_i+0x1f4>
 8005544:	1b80      	subs	r0, r0, r6
 8005546:	6060      	str	r0, [r4, #4]
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	2300      	movs	r3, #0
 800554e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005552:	e7a8      	b.n	80054a6 <_printf_i+0x152>
 8005554:	4632      	mov	r2, r6
 8005556:	4649      	mov	r1, r9
 8005558:	4640      	mov	r0, r8
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	47d0      	blx	sl
 800555e:	3001      	adds	r0, #1
 8005560:	d0ab      	beq.n	80054ba <_printf_i+0x166>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	079b      	lsls	r3, r3, #30
 8005566:	d413      	bmi.n	8005590 <_printf_i+0x23c>
 8005568:	68e0      	ldr	r0, [r4, #12]
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	4298      	cmp	r0, r3
 800556e:	bfb8      	it	lt
 8005570:	4618      	movlt	r0, r3
 8005572:	e7a4      	b.n	80054be <_printf_i+0x16a>
 8005574:	2301      	movs	r3, #1
 8005576:	4632      	mov	r2, r6
 8005578:	4649      	mov	r1, r9
 800557a:	4640      	mov	r0, r8
 800557c:	47d0      	blx	sl
 800557e:	3001      	adds	r0, #1
 8005580:	d09b      	beq.n	80054ba <_printf_i+0x166>
 8005582:	3501      	adds	r5, #1
 8005584:	68e3      	ldr	r3, [r4, #12]
 8005586:	9903      	ldr	r1, [sp, #12]
 8005588:	1a5b      	subs	r3, r3, r1
 800558a:	42ab      	cmp	r3, r5
 800558c:	dcf2      	bgt.n	8005574 <_printf_i+0x220>
 800558e:	e7eb      	b.n	8005568 <_printf_i+0x214>
 8005590:	2500      	movs	r5, #0
 8005592:	f104 0619 	add.w	r6, r4, #25
 8005596:	e7f5      	b.n	8005584 <_printf_i+0x230>
 8005598:	080059b1 	.word	0x080059b1
 800559c:	080059c2 	.word	0x080059c2

080055a0 <_sbrk_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	2300      	movs	r3, #0
 80055a4:	4d05      	ldr	r5, [pc, #20]	; (80055bc <_sbrk_r+0x1c>)
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fc fa92 	bl	8001ad4 <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_sbrk_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_sbrk_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000210 	.word	0x20000210

080055c0 <__sread>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	460c      	mov	r4, r1
 80055c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c8:	f000 f8ae 	bl	8005728 <_read_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	bfab      	itete	ge
 80055d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055d2:	89a3      	ldrhlt	r3, [r4, #12]
 80055d4:	181b      	addge	r3, r3, r0
 80055d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055da:	bfac      	ite	ge
 80055dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055de:	81a3      	strhlt	r3, [r4, #12]
 80055e0:	bd10      	pop	{r4, pc}

080055e2 <__swrite>:
 80055e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e6:	461f      	mov	r7, r3
 80055e8:	898b      	ldrh	r3, [r1, #12]
 80055ea:	4605      	mov	r5, r0
 80055ec:	05db      	lsls	r3, r3, #23
 80055ee:	460c      	mov	r4, r1
 80055f0:	4616      	mov	r6, r2
 80055f2:	d505      	bpl.n	8005600 <__swrite+0x1e>
 80055f4:	2302      	movs	r3, #2
 80055f6:	2200      	movs	r2, #0
 80055f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fc:	f000 f868 	bl	80056d0 <_lseek_r>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	4632      	mov	r2, r6
 8005604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005608:	81a3      	strh	r3, [r4, #12]
 800560a:	4628      	mov	r0, r5
 800560c:	463b      	mov	r3, r7
 800560e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	f000 b817 	b.w	8005648 <_write_r>

0800561a <__sseek>:
 800561a:	b510      	push	{r4, lr}
 800561c:	460c      	mov	r4, r1
 800561e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005622:	f000 f855 	bl	80056d0 <_lseek_r>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	bf15      	itete	ne
 800562c:	6560      	strne	r0, [r4, #84]	; 0x54
 800562e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005636:	81a3      	strheq	r3, [r4, #12]
 8005638:	bf18      	it	ne
 800563a:	81a3      	strhne	r3, [r4, #12]
 800563c:	bd10      	pop	{r4, pc}

0800563e <__sclose>:
 800563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005642:	f000 b813 	b.w	800566c <_close_r>
	...

08005648 <_write_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	2200      	movs	r2, #0
 8005652:	4d05      	ldr	r5, [pc, #20]	; (8005668 <_write_r+0x20>)
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fc f9ef 	bl	8001a3a <_write>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_write_r+0x1e>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_write_r+0x1e>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	20000210 	.word	0x20000210

0800566c <_close_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	2300      	movs	r3, #0
 8005670:	4d05      	ldr	r5, [pc, #20]	; (8005688 <_close_r+0x1c>)
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	602b      	str	r3, [r5, #0]
 8005678:	f7fc f9fb 	bl	8001a72 <_close>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_close_r+0x1a>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_close_r+0x1a>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20000210 	.word	0x20000210

0800568c <_fstat_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	2300      	movs	r3, #0
 8005690:	4d06      	ldr	r5, [pc, #24]	; (80056ac <_fstat_r+0x20>)
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	f7fc f9f5 	bl	8001a88 <_fstat>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d102      	bne.n	80056a8 <_fstat_r+0x1c>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	b103      	cbz	r3, 80056a8 <_fstat_r+0x1c>
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	bf00      	nop
 80056ac:	20000210 	.word	0x20000210

080056b0 <_isatty_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	2300      	movs	r3, #0
 80056b4:	4d05      	ldr	r5, [pc, #20]	; (80056cc <_isatty_r+0x1c>)
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fc f9f3 	bl	8001aa6 <_isatty>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_isatty_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_isatty_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20000210 	.word	0x20000210

080056d0 <_lseek_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	2200      	movs	r2, #0
 80056da:	4d05      	ldr	r5, [pc, #20]	; (80056f0 <_lseek_r+0x20>)
 80056dc:	602a      	str	r2, [r5, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f7fc f9eb 	bl	8001aba <_lseek>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_lseek_r+0x1e>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_lseek_r+0x1e>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	20000210 	.word	0x20000210

080056f4 <memchr>:
 80056f4:	4603      	mov	r3, r0
 80056f6:	b510      	push	{r4, lr}
 80056f8:	b2c9      	uxtb	r1, r1
 80056fa:	4402      	add	r2, r0
 80056fc:	4293      	cmp	r3, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	d101      	bne.n	8005706 <memchr+0x12>
 8005702:	2000      	movs	r0, #0
 8005704:	e003      	b.n	800570e <memchr+0x1a>
 8005706:	7804      	ldrb	r4, [r0, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	428c      	cmp	r4, r1
 800570c:	d1f6      	bne.n	80056fc <memchr+0x8>
 800570e:	bd10      	pop	{r4, pc}

08005710 <__malloc_lock>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__malloc_lock+0x8>)
 8005712:	f7ff bb4b 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8005716:	bf00      	nop
 8005718:	20000208 	.word	0x20000208

0800571c <__malloc_unlock>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__malloc_unlock+0x8>)
 800571e:	f7ff bb46 	b.w	8004dae <__retarget_lock_release_recursive>
 8005722:	bf00      	nop
 8005724:	20000208 	.word	0x20000208

08005728 <_read_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	2200      	movs	r2, #0
 8005732:	4d05      	ldr	r5, [pc, #20]	; (8005748 <_read_r+0x20>)
 8005734:	602a      	str	r2, [r5, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f7fc f962 	bl	8001a00 <_read>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_read_r+0x1e>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_read_r+0x1e>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20000210 	.word	0x20000210

0800574c <_init>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr

08005758 <_fini>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr
